import telebot
from telebot import types
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from telebot.types import InputMediaPhoto
import sqlite3
import os
import array, gspread, requests, subprocess, datetime, uuid
import datetime as DT
import time
import json


# logfile = str(datetime.date.today()) + '.log' # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –ª–æ–≥-—Ñ–∞–π–ª–∞
token = '6112420224:AAFd0gDtUiAC2qqWo4osq82D6qyGH07c_UY'
bot = telebot.TeleBot(token)
PHOTO_DIR = 'photo'
conn = sqlite3.connect('DATABASE/restaurant1.db', check_same_thread=False)
markdown = """
    *bold text*
    _italic text_
    [text](URL)
    """

clients_json_id = []
message_dict_id = {}

global dish_dict
try:
    with conn:
        cursor = conn.cursor()
        cursor.execute(f"SELECT * FROM CategoryDish")
        data = cursor.fetchall()  # fetchone
        column_names = [i[1] for i in conn.execute(f"SELECT * FROM CategoryDish")]
        column_ids = [i[0] for i in conn.execute(f"SELECT * FROM CategoryDish")]
        column_dict = dict(zip(column_names, column_ids))
except Exception as e:
    print(e)

try:
    with conn:
        cursor = conn.cursor()
        cursor.execute(f"SELECT * FROM SubCategory")
        data = cursor.fetchall()  # fetchone
        subcat_names = [i[1] for i in conn.execute(f"SELECT * FROM SubCategory")]
        cat_ids = [str(i[4]) for i in conn.execute(f"SELECT * FROM SubCategory")]
        subcat_id = [str(i[0]) for i in conn.execute(f"SELECT * FROM SubCategory")]
        subcat_dict = dict(zip(subcat_names, cat_ids))  # —Å–ª–æ–≤–∞—Ä—å {–Ω–∞–∑–≤–∞–Ω–∏–µ —Å—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏–∏: id CategoryDish}
        subcat_dict2 = dict(zip(subcat_names, subcat_id))  # —Å–ª–æ–≤–∞—Ä—å {–Ω–∞–∑–≤–∞–Ω–∏–µ —Å—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏–∏: id SubCategory}
        subcat_dict3 = {k: ''.join([d[k] for d in (subcat_dict, subcat_dict2)]) for k in subcat_dict.keys()}  # —Å–ª–æ–≤–∞—Ä—å {–Ω–∞–∑–≤–∞–Ω–∏–µ —Å—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏–∏: 'id CategoryDish+id SubCategory'} –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –¥–≤—É—Ö –∞–π–¥–∏—à–µ–∫ –±—É–¥–µ–º –ø–æ—Ç–æ–º —Ä–∞–∑–±–∏–≤–∞—Ç—å –≤ –∫–æ–ª–±—ç–∫ –¥–∞—Ç–µ
except Exception as e:
    print(e)

try:
    with conn:
        global client_id
        clients_telegram_id = [i[4] for i in conn.execute(f"SELECT * FROM Clients")]
        print("–∞–π–¥–∏ —Ç–µ–ª–µ–≥–∏ —é–∑–µ—Ä–æ–≤", clients_telegram_id)
except Exception as e:
    print(e)

try:
    with conn:
        orders_telegram_id = [i[5] for i in conn.execute(f"SELECT * FROM Orders")]  # telegram id —é–∑–µ—Ä–æ–≤, —Å–¥–µ–ª–∞–≤—à–∏—Ö –∑–∞–∫–∞–∑
        orders_datetime = [i[4] for i in conn.execute(f"SELECT * FROM Orders")]
        print(type(orders_telegram_id[0]), orders_telegram_id)
except Exception as e:
    print(e)

try:
    with conn:
        # data = conn.execute("SELECT * FROM Dish")
        # print(data.fetchall())
        # cursor = conn.cursor()
        # cursor.execute(f"SELECT * FROM Dish")
        # data2 = cursor.fetchall()  # fetchone
        dish_names = [i[1] for i in conn.execute(f"SELECT * FROM Dish WHERE is_stop = '–í –ø—Ä–æ–¥–∞–∂–µ'")]
        dish_cat_ids = [str(i[11]) for i in conn.execute(f"SELECT * FROM Dish WHERE is_stop = '–í –ø—Ä–æ–¥–∞–∂–µ'")]
        dish_ids = [str(i[0]) for i in conn.execute(f"SELECT * FROM Dish")]
        dish_status = [i[8] for i in conn.execute(f"SELECT * FROM Dish")]
        dish_dict2 = dict(zip(dish_names, dish_ids))
        dish_dict = dict(zip(dish_names, dish_cat_ids))
        dish_all_dict = dict(zip(dish_names, [[i[1], i[2], i[3], i[4], i[5], i[6], i[7], i[9], i[0]] for i in conn.execute(f"SELECT * FROM Dish")]))
except Exception as e:
    print(e)

try:
    with conn:
        data = conn.execute("SELECT * FROM Reviews")
        print(data.fetchall())
        review_order = [i[1] for i in conn.execute(f"SELECT * FROM Reviews WHERE accept = 'YES'")]
        review_dish = [i[2] for i in conn.execute(f"SELECT * FROM Reviews")]
        client_id = [i[3] for i in conn.execute(f"SELECT * FROM Reviews WHERE accept = 'YES'")]
        orders_id = [i[4] for i in conn.execute(f"SELECT * FROM Reviews")]
        review_id = [i[0] for i in conn.execute(f"SELECT * FROM Reviews")]
        print("qqqqqqqqq", review_order, client_id)
        dish_id = [str(i[5]) for i in conn.execute(f"SELECT * FROM Reviews")]
        review_order_dict = dict(zip(review_order, client_id))  # –º–æ–∂–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω–¥–µ–∫—Å–∞–º–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–≤–æ–¥–∏–º—ã—Ö –æ—Ç–∑—ã–≤–æ–≤
        print(review_order_dict)
        review_dish_dict = dict(zip(dish_id, review_dish))
        print(review_dish_dict)
        client_name = [i[1] for i in conn.execute(f"SELECT * FROM Clients")]
        client_id2 = [i[0] for i in conn.execute(f"SELECT * FROM Clients")]
        client_dict = dict(zip(client_id2, client_name))
        print(client_dict)
        cursor = conn.cursor()
        cursor.execute(f"SELECT * FROM Reviews")
        data_feedback = cursor.fetchall()  # fetchone
        feedback = [i[1] for i in conn.execute(f"SELECT * FROM Reviews")]
        cursor.execute("SELECT * FROM Clients WHERE id = 4")
        gg = cursor.fetchall()
        print(gg)
except Exception as e:
    print(e)

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é USER-–ø–∞–Ω–µ–ª–∏
Main_inline_keyb = InlineKeyboardMarkup()
Main_inline_keyb.add(InlineKeyboardButton("–ú–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞", callback_data="menu:txt1"))
Main_inline_keyb.add(InlineKeyboardButton("–ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞", callback_data="menu:txt3"))
Main_inline_keyb.add(InlineKeyboardButton("–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤", callback_data="menu:txt4"))
Main_inline_keyb.add(InlineKeyboardButton("–û –Ω–∞—Å", callback_data="menu:txt2"))
Main_inline_keyb.add(InlineKeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="menu:profile"))

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è ADMIN-–ø–∞–Ω–µ–ª–∏ 1 —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞
Admin_keyb_lvl1 = InlineKeyboardMarkup()
Admin_keyb_lvl1.add(InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞‚ûï", callback_data="admin_lvl1:addadmin"))
Admin_keyb_lvl1.add(InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞‚ûñ", callback_data="admin_lvl1:deladmin"))
Admin_keyb_lvl1.add(InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞üõ†Ô∏è", callback_data="admin_lvl1:redadmin"))

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è ADMIN-–ø–∞–Ω–µ–ª–∏ 2 —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞
Admin_keyb_lvl2 = InlineKeyboardMarkup()
Admin_keyb_lvl2.add(InlineKeyboardButton("–£—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–∑—ã–≤—ã –æ –∑–∞–∫–∞–∑–∞—Ö", callback_data="admin_lvl2:admin_orders_rev"))
Admin_keyb_lvl2.add(InlineKeyboardButton("–£—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–∑—ã–≤—ã –æ –±–ª—é–¥–∞—Ö", callback_data="admin_lvl2:admin_dishes_rev"))
Admin_keyb_lvl2.add(InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ", callback_data="admin_lvl2:admin_dish_add"))
Admin_keyb_lvl2.add(InlineKeyboardButton("–ë–ª—é–¥–æ –Ω–∞ –°–¢–û–ü", callback_data="admin_lvl2:admin_dish_stop"))

global msg_to_admin
msg_to_admin = '–ü–æ—Å—Ç—É–ø–∏–ª –∑–∞–∫–∞–∑'
markup_administration = InlineKeyboardMarkup()
markup_administration.add(InlineKeyboardButton(msg_to_admin, callback_data='0:order_is_ready'))


"""***START –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –æ–±–Ω–æ–≤–ª—è–µ–º–æ–π –∫–Ω–æ–ø–∫–æ–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–∫–∞–∑—ã–≤–∞–µ–º–æ–≥–æ –±–ª—é–¥–∞ START***"""
count = 1  # –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–æ–±–∞–≤–ª—è–µ–º–æ–≥–æ –≤ –∫–æ—Ä–∑–∏–Ω—É –±–ª—é–¥–∞
def create_keyboard(dish_id):  # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥ –∫–∞—Ä—Ç–æ—á–∫–æ–π –±–ª—é–¥–∞
    markup_dish = InlineKeyboardMarkup(row_width=3)
    markup_dish.add(InlineKeyboardButton('-', callback_data='dish_card:minus'),
                    InlineKeyboardButton(str(count), callback_data=':count'),
                    InlineKeyboardButton('+', callback_data='dish_card:plus'),
                    InlineKeyboardButton("–í –∫–æ—Ä–∑–∏–Ω—É", callback_data="dish_card:basket"),
                    InlineKeyboardButton('–û—Ç–∑—ã–≤—ã', callback_data=f'dish_card:dish_feedback:{dish_id}'))
    return markup_dish
"""***END –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –æ–±–Ω–æ–≤–ª—è–µ–º–æ–π –∫–Ω–æ–ø–∫–æ–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–∫–∞–∑—ã–≤–∞–µ–º–æ–≥–æ –±–ª—é–¥–∞ END***"""


"""***START –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è START***"""
profile_edit_data = {"–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è": "edit:name",
                     "–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω": "edit:phone_number",
                     "–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å": "edit:delivery_adress",
                     "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é": "menu:b1"}
def create_edit_button(dct):  # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å
    edit_button = telebot.types.InlineKeyboardMarkup()
    for key, value in dct.items():
        edit_button.add(telebot.types.InlineKeyboardButton(key, callback_data=value))
    return edit_button
"""***END –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è END***"""


global field, field_dict
field_dict = {"name": "–ò–º—è", "phone_number": "–¢–µ–ª–µ—Ñ–æ–Ω", "delivery_adress": "–ê–¥—Ä–µ—Å"}
field = 'name'
global reg_name, reg_phone_number, reg_delivery_adress  # –∑–Ω–∞—á–µ–Ω–∏—è (–¥–∞–Ω–Ω—ã–µ —é–∑–µ—Ä–∞) –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –∫-–µ –±—É–¥–µ–º –ø–æ—Ç–æ–º –∏–∑–º–µ–Ω—è—Ç—å
reg_name, reg_phone_number, reg_delivery_adress = "–£–∫–∞–∑–∞—Ç—å –∏–º—è", "–£–∫–∞–∑–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", "–£–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å"
global reg_field, reg_field_dict
reg_field = "name"  # –ø–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
reg_field_dict = {"name": "–ò–º—è", "phone_number": "–¢–µ–ª–µ—Ñ–æ–Ω", "delivery_adress": "–ê–¥—Ä–µ—Å"}
def create_registration_keyb():  # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    registration_keyb = telebot.types.InlineKeyboardMarkup(row_width=1)
    registration_keyb.add(InlineKeyboardButton(reg_name, callback_data="reg:name"),
                          InlineKeyboardButton(reg_phone_number, callback_data="reg:phone_number"),
                          InlineKeyboardButton(reg_delivery_adress, callback_data="reg:delivery_adress"),
                          InlineKeyboardButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å\u2705", callback_data="accept:save_all"),
                          InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="menu:b1"))
    return registration_keyb


def create_edit_cart_keyb(dct):  # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã, –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å
    Clear_basket_keyb = InlineKeyboardMarkup(row_width=3)
    num = 1
    for key, value in dct.items():
        Clear_basket_keyb.add(InlineKeyboardButton(f"{num}. {key}: {value[1]} —à—Ç.", callback_data=f"show:{key}:{value[0]}:{value[1]}"))
        num += 1
        Clear_basket_keyb.add(InlineKeyboardButton("-", callback_data=f"dish-:-:{key}:{value[0]}:{value[1]}"),
                              InlineKeyboardButton("+", callback_data=f"dish+:+:{key}:{value[0]}:{value[1]}"),
                              InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data=f"clear_cart:clear_one_dish:{key}:{value[0]}:{value[1]}"))
    Clear_basket_keyb.add(InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –≤—Å—ë –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã", callback_data="user_basket:clear_basket_all"))
    Clear_basket_keyb.add(InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="menu:txt3"))
    Clear_basket_keyb.add(InlineKeyboardButton("–ú–µ–Ω—é", callback_data="menu:b1"))
    return Clear_basket_keyb


def create_admin_review_keyb(dct):  # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤ –æ –∑–∞–∫–∞–∑–∞—Ö, –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å
    AdminReviewOrder_inline_keyb = InlineKeyboardMarkup(row_width=4)
    AdminReviewOrder_inline_keyb.add(InlineKeyboardButton("–ù–æ–º–µ—Ä", callback_data="qwerty:qwerty"),
                                     InlineKeyboardButton("–°—Ç–∞—Ç—É—Å", callback_data="qwerty:qwerty"),
                                     InlineKeyboardButton("–£—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="qwerty:qwerty"),
                                     InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="qwerty:qwerty"))  # –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Å —Ñ–∏–∫—Ç–∏–≤–Ω—ã–º –∫–æ–ª–±—ç–∫–æ–º
    for key, value in dct.items():
        with conn:
            current_review_status = [i[6] for i in conn.execute(f"SELECT * FROM Reviews WHERE id = {key}")][0]
            print(current_review_status)
        AdminReviewOrder_inline_keyb.add(InlineKeyboardButton(f"{key}.", callback_data=f"edit_review:review_{key}"),
                                         InlineKeyboardButton(f"{value[2]}", callback_data="qwerty:qwerty"),
                                         InlineKeyboardButton("\u2705", callback_data=f"+edit_review:+{key}"),
                                         InlineKeyboardButton("\u274C", callback_data=f"-edit_review:-{key}"))
    AdminReviewOrder_inline_keyb.add(InlineKeyboardButton("–ú–µ–Ω—é", callback_data="menu:b1"))
    AdminReviewOrder_inline_keyb.add(InlineKeyboardButton("–ê–¥–º–∏–Ω–∫–∞", callback_data="admin_lvl2:admin_panel"))
    return AdminReviewOrder_inline_keyb


def create_admin_reviewdish_keyb(dct):  # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤ –æ –±–ª—é–¥–∞—Ö, –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å
    AdminReviewDish_inline_keyb = InlineKeyboardMarkup(row_width=4)
    AdminReviewDish_inline_keyb.add(InlineKeyboardButton("–ù–æ–º–µ—Ä", callback_data="qwerty:qwerty"),
                                     InlineKeyboardButton("–°—Ç–∞—Ç—É—Å", callback_data="qwerty:qwerty"),
                                     InlineKeyboardButton("–£—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="qwerty:qwerty"),
                                     InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="qwerty:qwerty"))  # –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Å —Ñ–∏–∫—Ç–∏–≤–Ω—ã–º –∫–æ–ª–±—ç–∫–æ–º
    for key, value in dct.items():
        with conn:
            current_reviewdish_status = [i[4] for i in conn.execute(f"SELECT * FROM ReviewDish WHERE id = {key}")][0]
            print(current_reviewdish_status)
        AdminReviewDish_inline_keyb.add(InlineKeyboardButton(f"{key}.", callback_data=f"edit_review_dish:reviewdish_{key}"),
                                         InlineKeyboardButton(f"{value[2]}", callback_data="qwerty:qwerty"),
                                         InlineKeyboardButton("\u2705", callback_data=f"+edit_reviewdish:++{key}"),
                                         InlineKeyboardButton("\u274C", callback_data=f"-edit_reviewdish:--{key}"))
    AdminReviewDish_inline_keyb.add(InlineKeyboardButton("–ú–µ–Ω—é", callback_data="menu:b1"))
    AdminReviewDish_inline_keyb.add(InlineKeyboardButton("–ê–¥–º–∏–Ω–∫–∞", callback_data="admin_lvl2:admin_panel"))
    return AdminReviewDish_inline_keyb


global default_dict_add_dish
default_dict_add_dish = {1: ["–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞"],
                         2: ["–î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", "–û–ø–∏—Å–∞–Ω–∏–µ", "–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª—é–¥–∞"],
                         3: ["–£–∫–∞–∑–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å", "0.0", "–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–ª—é–¥–∞"],
                         4: ["–í—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏, –º–∏–Ω.", "0", "–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –±–ª—é–¥–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö"],
                         5: ["–£–∫–∞–∑–∞—Ç—å –≤–µ—Å/–æ–±—ä—ë–º", "0.0", "–£–∫–∞–∂–∏—Ç–µ –≤–µ—Å/–æ–±—ä—ë–º –±–ª—é–¥–∞ –≤ –≥—Ä./–º–ª."],
                         6: ["–í –Ω–∞–ª–∏—á–∏–∏ —à—Ç.", "0", "–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π –±–ª—é–¥–∞ –≤ –Ω–∞–ª–∏—á–∏–∏"],
                         7: ["–í—ã–±—Ä–∞—Ç—å –º–µ—Ä—É", "–≥—Ä./–º–ª.", "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä—É –∏–∑–º–µ—Ä–µ–Ω–∏—è –±–ª—é–¥–∞"],
                         8: ["–í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–ª—é–¥–∞"],
                         9: ["–í—ã–±—Ä–∞—Ç—å —Å—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏—é", "–°—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏—è", "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–ª—é–¥–∞"],
                         10: ["–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", "–§–û–¢–û", "–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –±–ª—é–¥–∞"]}
def create_admin_adddish_keyb(dct):  # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª—é–¥–∞ –≤ –ë–î, –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å
    AdminAddDish_inline_keyb = InlineKeyboardMarkup(row_width=2)
    AdminAddDish_inline_keyb.add(InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å:", callback_data="qwerty:qwerty"),
                                 InlineKeyboardButton("–†–µ–∑—É–ª—å—Ç–∞—Ç:", callback_data="qwerty:qwerty"))  # –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Å —Ñ–∏–∫—Ç–∏–≤–Ω—ã–º –∫–æ–ª–±—ç–∫–æ–º
    for key, value in dct.items():
        AdminAddDish_inline_keyb.add(InlineKeyboardButton(f"{key}. {value[0]}", callback_data=f"admin_add_new_dish:add_dish_{key}"),
                                     InlineKeyboardButton(f"{value[1]}", callback_data="qwerty:qwerty"))
    AdminAddDish_inline_keyb.add(InlineKeyboardButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="admin_add_dish:save_new_dish"))
    AdminAddDish_inline_keyb.add(InlineKeyboardButton("–ê–¥–º–∏–Ω–∫–∞", callback_data="admin_lvl2:admin_panel"))
    AdminAddDish_inline_keyb.add(InlineKeyboardButton("–ú–µ–Ω—é", callback_data="menu:b1"))
    return AdminAddDish_inline_keyb


def create_admin_stop_dish_keyboard(dct):  # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è STOP –±–ª—é–¥–∞ –≤ –ë–î, –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å
    AdminDelDish_inline_keyb = InlineKeyboardMarkup(row_width=2)
    # AdminDelDish_inline_keyb.add(InlineKeyboardButton("–ë–ª—é–¥–æ:                       –°—Ç–∞—Ç—É—Å:", callback_data="qwerty:qwerty"))  # –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Å —Ñ–∏–∫—Ç–∏–≤–Ω—ã–º –∫–æ–ª–±—ç–∫–æ–º
    for key, value in dct.items():
        # with conn:
            # stop_status = [i[8] for i in conn.execute(f"SELECT * FROM Dish WHERE id = {value}")][0]
            # print(stop_status)
        AdminDelDish_inline_keyb.add(InlineKeyboardButton(f"{key}. {value[0]}: {value[1]}", callback_data=f"qwerty:qwerty"))
        AdminDelDish_inline_keyb.add(InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å\u2705", callback_data=f"stop_dish:{value[1]}:{key}"))
    AdminDelDish_inline_keyb.add(InlineKeyboardButton("–ú–µ–Ω—é", callback_data="menu:b1"))
    AdminDelDish_inline_keyb.add(InlineKeyboardButton("–ê–¥–º–∏–Ω–∫–∞", callback_data="admin_lvl2:admin_panel"))
    return AdminDelDish_inline_keyb


@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, '''–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç-–±–æ—Ç "FoodBot". –ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –µ–¥—É –ø–æ –≤–∫—É—Å—É –∏–∑ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ "–õ—ñ—Ç–≤—ñ–Ω—ã".\n–ß—Ç–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?''', reply_markup=Main_inline_keyb)
    global user_telegram_id
    user_telegram_id = message.from_user.id
    # print(type(user_telegram_id), message.from_user.id)


@bot.message_handler(commands=['addadmin'])
def add_admin(message):
    user_id = message.from_user.id  # id —Ç–µ–ª–µ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with conn:
        row = [i[1] for i in conn.execute("SELECT * FROM BotAdmins WHERE position = 'admin lvl1'")]
    if user_id not in row:  # –ø—Ä–æ–≤–µ—Ä—è–µ–º id –Ω–∞ –ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç—å
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞.\n–ù–µ—Ç –ø—Ä–∞–≤–¥ –¥–æ—Å—Ç—É–ø–∞.", reply_markup=Main_inline_keyb)
    else:  # –µ—Å–ª–∏ –µ—Å—Ç—å, —Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω—É –∫–ª–∞–≤—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∫–æ–π
        bot.send_message(message.chat.id,
                         "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å 1 —É—Ä–æ–≤–Ω—è.\n"
                         "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ 2 —É—Ä–æ–≤–Ω—è.", reply_markup=Admin_keyb_lvl1)


@bot.message_handler(commands=['admin'])
def admin_management(message):
    admin_id = message.from_user.id  # id —Ç–µ–ª–µ–≥–∏ –∞–¥–º–∏–Ω–∞ 2 —É—Ä–æ–≤–Ω—è
    with conn:
        row = [i[1] for i in conn.execute("SELECT * FROM BotAdmins WHERE position = 'admin lvl2' OR position = 'admin lvl1'")]
    if admin_id not in row:  # –ø—Ä–æ–≤–µ—Ä—è–µ–º id
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞.\n–ù–µ—Ç –ø—Ä–∞–≤–¥ –¥–æ—Å—Ç—É–ø–∞.", reply_markup=Main_inline_keyb)
    else:  # –µ—Å–ª–∏ –µ—Å—Ç—å, —Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω—É –∫–ª–∞–≤—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∫–æ–π
        bot.send_message(message.chat.id,
                         "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å 2 —É—Ä–æ–≤–Ω—è.\n"
                         "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:\n"
                         "- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –±–ª—é–¥–∞;\n"
                         "- –ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–ª—é–¥–∞ –Ω–∞ –°–¢–û–ü\n"
                         "- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–æ–≤.", reply_markup=Admin_keyb_lvl2)


@bot.callback_query_handler(func=lambda call: call.data.split(":"))
def query_handler(call):
    bot.answer_callback_query(callback_query_id=call.id,)
    if call.data.split(':')[1] == "qwerty":  # –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –∞–¥–º–∏–Ω–∫–µ
        print("qwerty")
    if call.data.split(':')[1] == "txt1":
        print("–≥–ª–∞–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ (–Ω–∞–ø—Ä., "–Ø–ø–æ–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è")
        global Category_inline_keyb
        Category_inline_keyb = InlineKeyboardMarkup()
        [Category_inline_keyb.add(InlineKeyboardButton(key, callback_data=f"{key}:{value}")) for key, value in column_dict.items()]
        Category_inline_keyb.add(InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="menu:b1"))
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=Category_inline_keyb)
    if call.data.split(':')[1] == "b1":
        bot.send_message(call.message.chat.id, "–ß—Ç–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=Main_inline_keyb)
    if call.data.split(':')[1] == "b2":
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=Category_inline_keyb)
    if call.data.split(':')[0] in column_dict:
        print("—Å—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        print(call.data.split(':')[0], call.data.split(':')[1])
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏–π (–Ω–∞–ø—Ä., "–°—É—à–∏ –∏ —Ä–æ–ª–ª—ã")
        global Sub_inline_keyb
        Sub_inline_keyb = InlineKeyboardMarkup()
        [Sub_inline_keyb.add(InlineKeyboardButton(key, callback_data=f"{key}:{value}")) for key, value in subcat_dict3.items() if str(value[0]) == call.data.split(':')[1]]
        Sub_inline_keyb.add(InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="menu:b1"))
        Sub_inline_keyb.add(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="menu:b2"))
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=Sub_inline_keyb)
    if call.data.split(':')[0] in subcat_dict3:
        print("–≤–∏–¥—ã –æ–¥–Ω–æ—Ä–æ–¥–Ω—ã—Ö –±–ª—é–¥ —Ç–∏–ø–∞ —Å—É–ø—ã, –ø–∏—Ü—Ü—ã –∏ —Ç–¥")
        print(call.data.split(':')[0], call.data.split(':')[1][1:], call.data.split(':'))
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –±–ª—é–¥ –≤–Ω—É—Ç—Ä–∏ —Å—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏–π (–Ω–∞–ø—Ä., "–§–∏–ª–∞–¥–µ–ª—å—Ñ–∏—è –º–∞–∫–∏")
        Dish_inline_keyb = InlineKeyboardMarkup()
        [Dish_inline_keyb.add(InlineKeyboardButton(key, callback_data=f"{key}:{value}")) for key, value in dish_dict.items() if value == call.data.split(':')[1][1:]]
        Dish_inline_keyb.add(InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="menu:b1"))
        Dish_inline_keyb.add(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="menu:b3"))
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=Dish_inline_keyb)


#START code Serezha + Dima________________________________
    global dish_ids
    global dish_names
    if call.data.split(':')[0] in dish_dict:
        dish_ids = []
    if call.data.split(':')[0] in dish_all_dict:
        print("yyyyyyyyyyyy", call.data.split(':'), dish_all_dict[call.data.split(':')[0]][2])
        global current_dish_id
        current_dish_id = dish_all_dict[call.data.split(':')[0]][8]
        dish_ids.append(dish_all_dict[call.data.split(':')[0]][8])  # –∞–π–¥–∏ –±—é–ª—é–¥–∞ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ
        dish_names = dish_all_dict[call.data.split(':')[0]][0]
        global result_dish  # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –±–ª—é–¥–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —é–∑–µ—Ä—É —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è –∑–∞–∫–∞–∑–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
        result_dish = f"{call.data.split(':')[0]}\n" \
                      f"–û–ø–∏—Å–∞–Ω–∏–µ: {dish_all_dict[call.data.split(':')[0]][1]}\n" \
                      f"–¶–µ–Ω–∞: {dish_all_dict[call.data.split(':')[0]][3]} BYN (1 —à—Ç.)\n" \
                      f"–í–µ—Å: {dish_all_dict[call.data.split(':')[0]][5]} {dish_all_dict[call.data.split(':')[0]][6]}\n" \
                      f"–í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: {dish_all_dict[call.data.split(':')[0]][4]} –º–∏—É–Ω—É—Ç\n"
        with open("photo/" + dish_all_dict[call.data.split(':')[0]][2], "rb") as img:  # calldata - id –±–ª—é–¥–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–æ—Ç–≤-–π –∫–∞—Ä—Ç–∏–Ω–∫–∏ —ç—Ç–æ–≥–æ –±–ª—é–¥–∞
            bot.send_photo(call.message.chat.id, photo=img)
        bot.send_message(call.message.chat.id, f"{result_dish}", reply_markup=create_keyboard(current_dish_id))

    """***START –û–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–±—ç–∫–∞ –æ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –æ–±–Ω–æ–≤–ª—è–µ–º–æ–π –∫–Ω–æ–ø–∫–æ–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–∫–∞–∑—ã–≤–∞–µ–º–æ–≥–æ –±–ª—é–¥–∞ START***"""
    global count  # –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–æ–±–∞–≤–ª—è–µ–º–æ–≥–æ –≤ –∫–æ—Ä–∑–∏–Ω—É –±–ª—é–¥–∞
    bot.answer_callback_query(call.id)  # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ
    if call.data.split(':')[1] == "minus":  # –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "-"
        if count > 1:  # –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ
            count -= 1  # —É–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ –æ–¥–∏–Ω
            bot.edit_message_text(f"{result_dish}", call.message.chat.id, call.message.message_id,
                                  reply_markup=create_keyboard(current_dish_id))  # –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    elif call.data.split(':')[1] == "plus":  # –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "+"
        count += 1  # —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ –æ–¥–∏–Ω
        bot.edit_message_text(f"{result_dish}", call.message.chat.id, call.message.message_id,
                              reply_markup=create_keyboard(current_dish_id))  # –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    """***END –û–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–±—ç–∫–∞ –æ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –æ–±–Ω–æ–≤–ª—è–µ–º–æ–π –∫–Ω–æ–ø–∫–æ–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–∫–∞–∑—ã–≤–∞–µ–º–æ–≥–æ –±–ª—é–¥–∞ END***"""

    global dict_info_dish_id
    client_telegram_id = int(call.message.chat.id)
    if call.data.split(':')[1] in ['basket', 'basket2', "txt3"]:
        if call.data.split(':')[1] == 'basket':
            """–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—à–µ–º –≤ –ö–æ—Ä–∑–∏–Ω—É –ë–î –¥–∞–Ω–Ω—ã–µ –ø–æ id telegram –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –≤ —Ç–∞–±–ª–∏—Ü–µ Clients"""
            dict_info_dish_id = int(dish_ids[0])
            price_dish = [i[0] for i in conn.execute(f"SELECT price FROM Dish WHERE id ={dict_info_dish_id}")][0]
            """–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –¥–æ–±–∞–≤–ª—è–ª –ª–∏ —É–∂–µ —é–∑–µ—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É –¥–∞–Ω–Ω–æ–µ –±–ª—é–¥–æ"""
            cursor.execute(f"SELECT * FROM ShoppingCart WHERE dish_id ={dict_info_dish_id} AND client_id ={client_telegram_id}")
            check_dish_in_cart = cursor.fetchone()
            print("–ø—Ä–æ–≤–µ—Ä–∫–∞ –ö–û–†–ó–ò–ù–´ –¥–æ–±–∞–≤–ª—è–ª –ª–∏ —É–∂–µ —é–∑–µ—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É –¥–∞–Ω–Ω–æ–µ –±–ª—é–¥–æ", check_dish_in_cart)
            if check_dish_in_cart is None:
                print("–û–¢ –ù–ê–ù–ê –ø—Ä–∏–≤–µ—Ç")
                cart = "INSERT OR IGNORE INTO ShoppingCart (client_id, dish_id, total_price, count) values(?, ?, ?, ?)"
                total_price_dish = float(count * price_dish)
                with conn:
                    conn.execute(cart, [client_telegram_id, dict_info_dish_id, total_price_dish, count])
                conn.commit()
                count = 1  # —Å–±—Ä–æ—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –±–ª—é–¥–∞ –≤ —Ç–µ–∫—Å—Ç–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
            else:
                print("–û–¢ –≠–õ–°–ê –ø—Ä–∏–≤–µ—Ç")
                count_from_cart = count + [i[4] for i in conn.execute(f"SELECT * FROM ShoppingCart WHERE dish_id ={dict_info_dish_id} AND client_id = {client_telegram_id}")][0]
                print("–û–¢ count_from_cart –ø—Ä–∏–≤–µ—Ç", count_from_cart)
                total_price_dish2 = float((count_from_cart + count) * price_dish)
                print("–û–¢ total_price_dish2 –ø—Ä–∏–≤–µ—Ç", total_price_dish2)
                with conn:
                    conn.execute(f"UPDATE ShoppingCart SET total_price = ? WHERE dish_id =? AND client_id = ?",
                                 (total_price_dish2, dict_info_dish_id, client_telegram_id))
                    conn.execute(f"UPDATE ShoppingCart SET count = ? WHERE dish_id =? AND client_id = ?",
                                 (count_from_cart, dict_info_dish_id, client_telegram_id))
                conn.commit()
                count = 1  # —Å–±—Ä–æ—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –±–ª—é–¥–∞ –≤ —Ç–µ–∫—Å—Ç–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
        else:  #–µ—Å–ª–∏ basket2, —Ç–æ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–µ—Ç –Ω–µ–æ–±—Ö-—Ç–∏, —Ç–∞–∫ –∫–∞–∫ —É–∂–µ –¥–æ —ç—Ç–æ–≥–æ –¥–æ–±–∞–≤–∏–ª–∏, –∏ –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º –¥–∞–ª–µ–µ –∫–æ—Ä–∑–∏–Ω—É
            pass
        """–°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –Ω–µ–µ –ø–µ—Ä–≤–æ–≥–æ –±–ª—é–¥–∞"""
        order_after_cart_markup = InlineKeyboardMarkup()
        # order_after_cart_markup.add(InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data="menu:b2"))
        # order_after_cart_markup.add(InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è \U0001F464", callback_data="edit2:to_profile"))
        order_after_cart_markup.add(InlineKeyboardButton('–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ \u2705', callback_data='user_basket:–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑'))
        order_after_cart_markup.add(InlineKeyboardButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É \u274C', callback_data='user_basket:clear_basket'))
        order_after_cart_markup.add(InlineKeyboardButton("–ú–µ–Ω—é", callback_data="menu:b1"))
        """–ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        bot.answer_callback_query(call.id)
        user_id = call.from_user.id  # id —Ç–µ–ª–µ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("SELECT * FROM Clients WHERE telegram_id = ?", (user_id,))  # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥-—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        row = cursor.fetchone()
        if row is None:  # –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ/–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
            Reg_inline_keyb = InlineKeyboardMarkup()
            Reg_inline_keyb.add(InlineKeyboardButton("–†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø", callback_data="prereg:pushreg"))
            Reg_inline_keyb.add(InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="menu:b1"))
            bot.send_message(call.message.chat.id, "–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —á–∞—Ç-–±–æ—Ç–æ–º, –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.",
                             reply_markup=Reg_inline_keyb)
        else:  # –µ—Å–ª–∏ –µ—Å—Ç—å, —Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ –∫–æ—Ä–∑–∏–Ω—É+–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            check_ids = [i[0] for i in cursor.execute(f'SELECT ShoppingCart.dish_id FROM ShoppingCart WHERE ShoppingCart.client_id = {client_telegram_id}')]
            info = []
            for i in check_ids:
                dish_name_cart = cursor.execute(f'SELECT * FROM Dish WHERE Dish.id = {i}')
                infos = [i for i in dish_name_cart]
                info.append(infos)
            print("–ü—Ä–∏–≤–µ—Ç –æ—Ç –ò–ù–§–û —Ç—É—Ç –Ω–∞–¥–æ –Ω–∞–º —Ü–µ–Ω–∞ –¥–∏—à–∞", info)
            result = "–í—ã –¥–æ–±–∞–≤–∏–ª–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É:\n\n" \
                     "–ë–ª—é–¥–æ:  |–¶–µ–Ω–∞ –∑–∞ 1 —à—Ç.| –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ|\n"
            total_price = 0
            for i in info:
                for j in i:
                    print(j[0])
                    with conn:
                        count_dish_cart = [i for i in conn.execute(f'SELECT count FROM ShoppingCart WHERE {j[0]} = ShoppingCart.dish_id')][0][0]
                    # print(count_dish_cart)
                    total_price += float(j[4] * count_dish_cart)
                    result += f'{j[1]}:   {j[4]} —Ä.,   {count_dish_cart} —à—Ç.\n'
            # –µ—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞, —Ç–æ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ—Ç–≤-–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ –ø—É—Å—Ç–∞, —Ç–æ –∫–∞—Ä—Ç–æ—á–∫—É –∫–æ—Ä–∑–∏–Ω—ã
            if len(check_ids) == 0:
                bot.send_message(call.message.chat.id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –µ—â—ë –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ –±–ª—é–¥–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É.", reply_markup=Main_inline_keyb)
            else:
                bot.send_message(call.message.chat.id, f'{result}\n–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_price} —Ä.\u2705', reply_markup=order_after_cart_markup)

    if call.data.split(':')[1] == "dish_feedback":
        global dish_id_from_card
        dish_id_from_card = call.data.split(':')[2]
        DishReview_inline_keyb = InlineKeyboardMarkup()
        DishReview_inline_keyb.add(InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data=f"dish_card:dish_feedback2:{dish_id_from_card}"))
        DishReview_inline_keyb.add(InlineKeyboardButton("–ú–µ–Ω—é", callback_data="menu:b1"))
        print("–ê–ô–î–ò –¢–ï–ö–£–©–ï–ì–û –ë–õ–Æ–î–ê", dish_id_from_card)
        with conn:
            dish_feedback = [i[1] for i in conn.execute(f"SELECT * FROM ReviewDish WHERE dish_id = {call.data.split(':')[2]} AND accept = 'YES'")]
            cl_id_feedback = [i[2] for i in conn.execute(f"SELECT * FROM ReviewDish WHERE dish_id = {call.data.split(':')[2]} AND accept = 'YES'")]
            # review_order_dict = dict(zip(review_order[-3:], client_id[-3:]))  # –º–æ–∂–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω–¥–µ–∫—Å–∞–º–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–≤–æ–¥–∏–º—ã—Ö –æ—Ç–∑—ã–≤–æ–≤
            feedback_dish_dict = dict(zip(dish_feedback, cl_id_feedback))
            cl_name = [i[1] for i in conn.execute(f"SELECT * FROM Clients")]
            cl_id2 = [i[0] for i in conn.execute(f"SELECT * FROM Clients")]
            cl_dict = dict(zip(cl_id2, cl_name))
        result_feedback_card = ""
        for key, value in feedback_dish_dict.items():
            result_feedback_card += f"\U0001F5E8{cl_dict[value]}: '{key}'\n\n"
        print("–°–õ–û–í–ê–†–¨ –° –û–¢–ó–´–í–ê–ú–ò", result_feedback_card)
        if len(result_feedback_card) != 0:
            bot.send_message(call.message.chat.id, f"{result_feedback_card}", reply_markup=DishReview_inline_keyb)
        else:
            bot.send_message(call.message.chat.id, f"–û—Ç–∑—ã–≤–æ–≤ –µ—â–µ –Ω–µ—Ç. –í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π, –µ—Å–ª–∏ –∑–∞–∫–∞–∑—ã–≤–∞–ª–∏ —Ç–∞–∫–æ–µ –±–ª—é–¥–æ.", reply_markup=DishReview_inline_keyb)
    if call.data.split(':')[1] == "dish_feedback2":
        DishReviewError_inline_keyb = InlineKeyboardMarkup()
        DishReviewError_inline_keyb.add(InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="menu:b1"))
        DishReviewError_inline_keyb.add(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="menu:b3"))
        # –∫–æ–ª–æ–Ω–∫–∞ dish_ids - –∫–æ–ª–æ–Ω–∫–∞ –≤ Orders - —Å—Ç—Ä–æ–∫–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã —Å id –∑–∞–∫–∞–∑–∞–Ω–Ω—ã—Ö –±–ª—é–¥ + –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç.
        ids_string = list(filter(lambda x: dish_id_from_card in x, [list(map(lambda x: x.replace(" ", "").split(":")[0], i[0].split(","))) for i in conn.execute(f"SELECT dish_ids FROM Orders WHERE telegram_id = {call.message.chat.id}")]))

        print("JSONSSSSS ids dishes", ids_string)
        if call.message.chat.id in orders_telegram_id and len(ids_string) != 0:
            print("clients id telegram", call.message.chat.id)
            bot.answer_callback_query(call.id)  # –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–∞–∂–∞—Ç–∏–µ
            bot.send_message(call.message.chat.id,
                             "–ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –ª–∏ –í–∞–º –¥–∞–Ω–Ω–æ–µ –±–ª—é–¥–æ?",
                             reply_markup=telebot.types.ForceReply())  # —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –µ–≥–æ –æ—Ç–∑—ã–≤–µ
        else:
            bot.send_message(call.message.chat.id,
                             "–í—ã –µ—â—ë –Ω–µ –∑–∞–∫–∞–∑—ã–≤–∞–ª–∏ —É –Ω–∞—Å —Ç–∞–∫–æ–µ –±–ª—é–¥–æ.",
                             reply_markup=DishReviewError_inline_keyb)  # –≤—ã–¥–∞—Ç—å –∫–ª–∞–≤—É –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–Ω–µ–µ –Ω–µ –∑–∞–∫–∞–∑—ã–≤–∞–ª –±–ª—é–¥–æ
        """START Removing items from the cart START"""
    if call.data.split(':')[1] == 'clear_basket':
        # –≤—Å–µ –∞–π–¥–∏ –±–ª—é–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —é–∑–µ—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ + –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        dish_id_list = [i[0] for i in cursor.execute(f'SELECT dish_id FROM ShoppingCart WHERE client_id = {client_telegram_id}')]
        # –∫–æ–ª-–≤–æ —à—Ç—É–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–ª—é–¥–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —é–∑–µ—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        count_list = [i[0] for i in cursor.execute(f'SELECT count FROM ShoppingCart WHERE client_id = {client_telegram_id}')]
        dish_id_count = dict(zip(dish_id_list, count_list))
        dish_name_list = [[i[0] for i in conn.execute(f'SELECT name FROM Dish WHERE id = {i}')][0] for i in dish_id_list]
        global dish_name_id_count_dict  # {'–§–ª–æ—Ä–∏–¥–∞ –º–∞–∫–∏': (12, 1), '–í–∏–Ω–æ "PROSEKKO"': (33, 3), '–¢–∏—Ä–∞–º–∏—Å—É': (25, 2), '–ü–∏–≤–æ "–ö—Ä—ã–Ω—ñ—Ü–∞"': (14, 1)}
        # —Å–ª–æ–≤–∞—Ä—å {–Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞: (–∞–π–¥–∏ –±–ª—é–¥–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —é–∑–µ—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ + –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∫–æ—Ä–∑–∏–Ω–µ)}
        # dish_name_id_count_dict = dict(zip(dish_name_list, dish_id_count.items()))  # –≤–Ω—É—Ç—Ä–∏ –±—É–¥–µ—Ç –∫–æ—Ä—Ç–µ–∂, –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
        dish_name_id_count_dict = {}  # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
        for i in range(len(dish_name_list)):  # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º —Å–ø–∏—Å–∫–∞ –∏ –ø–æ–ª—É—á–∞–µ–º –∫–ª—é—á –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è a –ø–æ –∏–Ω–¥–µ–∫—Å—É i
            key = list(dish_id_count.keys())[i]
            value = list(dish_id_count.values())[i]
            dish_name_id_count_dict[dish_name_list[i]] = [key, value]  # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å –ø–∞—Ä—É –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ, –≥–¥–µ –∫–ª—é—á - —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ b, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ - —Å–ø–∏—Å–æ–∫ –∏–∑ –∫–ª—é—á–∞ –∏ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        print(dish_id_list, count_list, dish_id_count, dish_name_list, dish_name_id_count_dict, sep='\n')
        #–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–∑–¥–∞–Ω–Ω—É—é –≤ —Ñ—É–Ω–∫—Ü–∏–∏ create_edit_cart_keyb(dish_name_id_count_dict) –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        bot.send_message(call.message.chat.id, "–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤ –∫–æ—Ä–∑–∏–Ω—É –±–ª—é–¥"
                                               " —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ + - —É–¥–∞–ª–∏—Ç—å", reply_markup=create_edit_cart_keyb(dish_name_id_count_dict))
    bot.answer_callback_query(call.id)  # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ
    print("HELLO FROM CART", call.data.split(":"))
    if call.data.split(':')[0] == "dish-":  # –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "-" ['dish_minus', '-', '–ù–∏–≥–∏—Ä–∏ –°—è–∫–µ', '14', '1']
         if int(call.data.split(':')[4]) > 0:  # –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–ª—å—à–µ 0
             dish_name_id_count_dict[call.data.split(':')[2]][1] = int(call.data.split(':')[4]) - 1  # - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ –æ–¥–∏–Ω
             price_dish2 = [i[0] for i in conn.execute(f"SELECT price FROM Dish WHERE id ={int(call.data.split(':')[3])}")][0]
             total_price_dish3 = float(dish_name_id_count_dict[call.data.split(':')[2]][1] * price_dish2)
             with conn:
                 conn.execute(f"UPDATE ShoppingCart SET total_price = ? WHERE dish_id =? AND client_id = ?",
                              (total_price_dish3, int(call.data.split(':')[3]), client_telegram_id))
                 conn.execute(f"UPDATE ShoppingCart SET count = ? WHERE dish_id =? AND client_id = ?",
                              (dish_name_id_count_dict[call.data.split(':')[2]][1], int(call.data.split(':')[3]), client_telegram_id))
             conn.commit()
             bot.edit_message_text(f"–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤ –∫–æ—Ä–∑–∏–Ω—É –±–ª—é–¥"
                                               " —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ +, -, —É–¥–∞–ª–∏—Ç—å", call.message.chat.id, call.message.message_id,
                                   reply_markup=create_edit_cart_keyb(dish_name_id_count_dict))  # –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
         msg = bot.send_message(call.message.chat.id, f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª—é–¥–∞ {call.data.split(':')[2]} –≤ –∫–æ—Ä–∑–∏–Ω–µ —É–º–µ–Ω—å—à–µ–Ω–æ")
         time.sleep(2)
         bot.delete_message(call.message.chat.id, msg.message_id)
    if call.data.split(':')[0] == "dish+":  # –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "+" ['dish_minus', '+', '–ù–∏–≥–∏—Ä–∏ –°—è–∫–µ', '14', '1']
        dish_name_id_count_dict[call.data.split(':')[2]][1] = int(call.data.split(':')[4]) + 1  # + –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ –æ–¥–∏–Ω
        price_dish2 = [i[0] for i in conn.execute(f"SELECT price FROM Dish WHERE id ={int(call.data.split(':')[3])}")][0]
        total_price_dish3 = float(dish_name_id_count_dict[call.data.split(':')[2]][1] * price_dish2)
        with conn:
            conn.execute(f"UPDATE ShoppingCart SET total_price = ? WHERE dish_id =? AND client_id = ?",
                         (total_price_dish3, int(call.data.split(':')[3]), client_telegram_id))
            conn.execute(f"UPDATE ShoppingCart SET count = ? WHERE dish_id =? AND client_id = ?",
                         (dish_name_id_count_dict[call.data.split(':')[2]][1], int(call.data.split(':')[3]), client_telegram_id))
        conn.commit()
        bot.edit_message_text(f"–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤ –∫–æ—Ä–∑–∏–Ω—É –±–ª—é–¥"
                                               " —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ +, -, —É–¥–∞–ª–∏—Ç—å", call.message.chat.id, call.message.message_id,
                                   reply_markup=create_edit_cart_keyb(dish_name_id_count_dict))  # –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        msg = bot.send_message(call.message.chat.id, f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª—é–¥–∞ {call.data.split(':')[2]} –≤ –∫–æ—Ä–∑–∏–Ω–µ —É–≤–µ–ª–∏—á–µ–Ω–æ")
        time.sleep(3)
        bot.delete_message(call.message.chat.id, msg.message_id)
    if call.data.split(':')[1] == "clear_one_dish":  # –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "—É–¥–∞–ª–∏—Ç—å" ['dish_minus', '—É–¥–∞–ª–∏—Ç—å', '–ù–∏–≥–∏—Ä–∏ –°—è–∫–µ', '14', '1']
        with conn:
            conn.execute(f"DELETE FROM ShoppingCart WHERE dish_id = {int(call.data.split(':')[3])}")
        conn.commit()
        dish_name_id_count_dict.pop(call.data.split(':')[2], None)
        bot.edit_message_text(f"–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤ –∫–æ—Ä–∑–∏–Ω—É –±–ª—é–¥"
                                               " —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ +, -, —É–¥–∞–ª–∏—Ç—å", call.message.chat.id, call.message.message_id,
                              reply_markup=create_edit_cart_keyb(dish_name_id_count_dict))  # –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        msg = bot.send_message(call.message.chat.id, "–ë–ª—é–¥–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
        time.sleep(3)
        bot.delete_message(call.message.chat.id, msg.message_id)
    if call.data.split(':')[1] == "clear_basket_all":  # —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ id telegram
        After_clear_basket_keyb = InlineKeyboardMarkup(row_width=2)
        After_clear_basket_keyb.add(InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="menu:txt3"),
                                    InlineKeyboardButton("–ú–µ–Ω—é", callback_data="menu:b1"))
        with conn:
            conn.execute(f'DELETE FROM ShoppingCart WHERE client_id = {call.message.chat.id}')
            # conn.execute(f'DELETE FROM Clients WHERE telegram_id = {message.chat.id}')
        conn.commit()
        bot.send_message(call.message.chat.id, "–ö–æ—Ä–∑–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!", reply_markup=After_clear_basket_keyb)
        msg = bot.send_message(call.message.chat.id, '–ö–æ—Ä–∑–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!')
        time.sleep(3)
        bot.delete_message(call.message.chat.id, msg.message_id)
    """END Removing items from the cart END"""
    if call.data.split(':')[1] == '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑':
        Comment_keyb = InlineKeyboardMarkup()
        Comment_keyb.add(InlineKeyboardButton("–î–∞", callback_data="user_basket:doit"))
        Comment_keyb.add(InlineKeyboardButton("–ù–µ—Ç", callback_data="user_basket:refuse"))
        with conn:
            count_all_dishes = sum([i[0] for i in conn.execute(f'SELECT count FROM ShoppingCart WHERE  client_id= {call.message.chat.id}')])
        print("–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª—é–¥ –≤ –∫–æ—Ä–∑–∏–Ω–µ", count_all_dishes)
        if count_all_dishes > 0:
            bot.send_message(call.message.chat.id, "–•–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞, –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –ª–∏–±–æ "
                                                   "–¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É?", reply_markup=Comment_keyb)
        else:
            bot.send_message(call.message.chat.id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –µ—â—ë –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ –±–ª—é–¥–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É.", reply_markup=Main_inline_keyb)
    if call.data.split(':')[1] == "doit":
        bot.answer_callback_query(call.id)  # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ
        bot.send_message(call.message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫ —Å–≤–æ–µ–º—É –∑–∞–∫–∞–∑—É.",
                         reply_markup=telebot.types.ForceReply())  # –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç –∏ —Ñ–æ—Ä—Å–∏–º –≤ —Ö–µ–Ω–¥–ª–µ—Ä
    if call.data.split(':')[1] == "refuse":
        with conn:
            client_address = [i[3] for i in conn.execute(f"SELECT * FROM Clients WHERE telegram_id = {call.message.chat.id}")][0]
            orders_id = [i for i in conn.execute(f'SELECT id FROM Orders WHERE  telegram_id = {call.message.chat.id}')][-1][0]
        markup_administration = InlineKeyboardMarkup()
        global information_in_admin_after_click_in_yes
        information_in_admin_after_click_in_yes = [i[0] for i in conn.execute(
            f'SELECT ShoppingCart.dish_id FROM ShoppingCart WHERE ShoppingCart.client_id = {call.message.chat.id} '
            f'AND ShoppingCart.count > 0')]
        information_in_admin_after_click_in_yes_count = [i[0] for i in conn.execute(
            f'SELECT ShoppingCart.count FROM ShoppingCart WHERE ShoppingCart.client_id = {call.message.chat.id} '
            f'AND ShoppingCart.count > 0')][0]
        information_in_admin_after_click_in_yes_price = [i[0] for i in conn.execute(
            f'SELECT ShoppingCart.total_price FROM ShoppingCart WHERE ShoppingCart.client_id = {call.message.chat.id} '
            f'AND ShoppingCart.count > 0')][0]
        markup_administration.add(InlineKeyboardButton('–ü–æ—Å—Ç—É–ø–∏–ª –∑–∞–∫–∞–∑',
                                                       callback_data=f'0:order_is_ready:{orders_id}:'
                                                                     f'{information_in_admin_after_click_in_yes}:'
                                                                     f'{information_in_admin_after_click_in_yes_count}:'
                                                                     f'{information_in_admin_after_click_in_yes_price}'))
        bot.send_message(call.message.chat.id, f'–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –í–∞—à –∑–∞–∫–∞–∑ –ø–æ –∞–¥—Ä–µ—Å—É: {client_address}:)', reply_markup=Main_inline_keyb)
        orders_table = "INSERT OR IGNORE INTO Orders (client_id, dish_ids, total_price, date, telegram_id, comment) values(?, ?, ?, ?, ?, ?)"
        current_datetime = DT.datetime.now()
        telegram_id = call.message.chat.id
        comment = "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"
        with conn:
            client_id = [i[0] for i in conn.execute(f"SELECT * FROM Clients WHERE telegram_id = {call.message.chat.id}")][0]
            total_price = sum([i[3] for i in conn.execute(f'SELECT * FROM ShoppingCart WHERE client_id = {call.message.chat.id} AND count > 0')])
            print(total_price)
            dish_ids = ''
            list_orders_dish = [i[0] for i in conn.execute(f'SELECT dish_id FROM ShoppingCart WHERE client_id = {call.message.chat.id} AND count > 0')]
            # print(list_orders_dish)
            j = 0
            for i in list_orders_dish:
                print(i)
                count_orders = [i[0] for i in conn.execute(
                    f"SELECT ShoppingCart.count FROM ShoppingCart WHERE {int(i)} = ShoppingCart.dish_id AND ShoppingCart.count > 0")][0]
                dish_ids += str(i) + ':' + str(count_orders) + ', '
                j += 1
            conn.execute(orders_table, [client_id, dish_ids, total_price, current_datetime, telegram_id, comment])
        conn.commit()
        with conn:
            conn.execute(f'DELETE FROM ShoppingCart WHERE client_id = {call.message.chat.id}')
        conn.commit()
        admin_to_information = ''
        for i in conn.execute(
                f"SELECT Dish.name, ShoppingCart.count, ShoppingCart.client_id FROM Dish, ShoppingCart "
                f"WHERE ShoppingCart.client_id = {call.message.chat.id} AND Dish.id = ShoppingCart.dish_id"):
            admin_to_information += f'**–ù–ê–ó–í–ê–ù–ò–ï - {i[0]} –ö–û–õ-–í–û:{i[1]}**\n'
        global id_msg
        msge = (bot.send_message(chat_id='@restaurantletvin', text=f'–ö–ª–∏–µ–Ω—Ç –∑–∞–∫–∞–∑–∞–ª:\n{admin_to_information}',
                                 parse_mode="Markdown", reply_markup=markup_administration).message_id)
        message_dict_id.setdefault(msge, orders_id)
        with open(r'C:\Users\admin\MegaBot\id_message.json', 'w+') as file:
            json.dump(message_dict_id, file, indent=4, ensure_ascii=False)
        conn.commit()
    if call.data.split(':')[1] == 'order_is_ready':
        # print(call.data.split(':')[2])
        markup_yes_or_no = InlineKeyboardMarkup()
        markup_yes_or_no.add(InlineKeyboardButton('–î–∞', callback_data=f'x:yes:{call.data.split(":")[2]}:{call.data.split(":")[3]}:{call.data.split(":")[4]}:{call.data.split(":")[5]}'), InlineKeyboardButton('–ù–µ—Ç', callback_data='y:no'))
        bot.send_message(call.message.chat.id, '–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–ª–∏–µ–Ω—Ç—É?', reply_markup=markup_yes_or_no)
    if call.data.split(':')[1] == 'yes':
        print('–í–û–¢ –ò –í–°–ï', type(call.data.split(":")[3]))
        with open(r'C:\Users\admin\MegaBot\id_message.json', 'r') as file:
            request = json.load(file)
            for key, value in request.items():
                print(key)
                txt = ''
                result = information_in_admin_after_click_in_yes
                if value == int(call.data.split(':')[2]):
                    with conn:
                        for j in result:
                            list_informations_for_adm = [i for i in conn.execute(f'SELECT Dish.name FROM Dish WHERE id = {int(j)}')]
                            print("–ú–ê–°–°–ò–í–í–í",list_informations_for_adm)
                            for i in list_informations_for_adm:
                                txt += f'–ó–∞–∫–∞–∑–∞–Ω–Ω–æ–µ –±–ª—é–¥–æ{i}\n'\
                                       f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {call.data.split(":")[4]}\n' \
                                       f'–¶–µ–Ω–∞:{call.data.split(":")[5]}'
                        msg_to_admin = f'–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω! {txt}'
                        bot.edit_message_text(msg_to_admin, call.message.chat.id, int(key))
                        bot.delete_message(call.message.chat.id, call.message.message_id)
    if call.data.split(':')[1] == "b3":
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=Sub_inline_keyb)
    """___–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–ª–±—ç–∫–∞ –æ—Ç –∫–Ω–æ–ø–∫–∏ '–û –Ω–∞—Å'___"""
    if call.data.split(':')[1] == "txt2":
        global Reviews_inline_keyb
        Reviews_inline_keyb = InlineKeyboardMarkup()
        Reviews_inline_keyb.add(InlineKeyboardButton("–û—Ç–∑—ã–≤—ã –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ", callback_data="review:r1"))
        # Reviews_inline_keyb.add(InlineKeyboardButton("–û—Ç–∑—ã–≤—ã –æ –µ–¥–µ", callback_data="review:r2"))
        Reviews_inline_keyb.add(InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="menu:b1"))
        """START –§–û–¢–ö–ò –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞ —Ä–µ—Å—Ç–∏–∫–∞, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ send_media_group: 
        # –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É 
        # —Å–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ InputMediaPhoto 
        # –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ —Ä–µ–∂–∏–º–µ —á—Ç–µ–Ω–∏—è –±–∞–π—Ç–æ–≤ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
        """
        files = os.listdir("photorest")
        photos = [file for file in files if file.endswith(".jpg")]  # —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é .jpg
        media = [InputMediaPhoto(open(os.path.join("photorest", photo), "rb")) for photo in photos]
        bot.send_media_group(call.message.chat.id, media)
        """END –§–û–¢–ö–ò –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞ —Ä–µ—Å—Ç–∏–∫–∞"""
        about_restaurant = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —É–≤–∞–∂–∞–µ–º—ã–µ –ì–æ—Å—Ç–∏!\n ¬´–õi—Ç–≤i–Ω—ã¬ª ‚Äî —Ä–µ—Å—Ç–æ—Ä–∞–Ω —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –±–µ–ª–æ—Ä—É—Å—Å–∫–æ–π –∫—É—Ö–Ω–∏." \
                           f"–í —Å—Ä–µ–¥–Ω–∏–µ –≤–µ–∫–∞ –ø—Ä–µ–¥–∫–æ–≤ –±–µ–ª–æ—Ä—É—Å–æ–≤ –Ω–∞–∑—ã–≤–∞–ª–∏ –ª–∏—Ç–≤–∏–Ω–∞–º–∏.–¢—Ä—É–¥–æ–ª—é–±–∏–≤–æ–µ –∏ –ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ–µ –Ω–∞—Å–µ–ª–µ–Ω–∏–µ" \
                           f" –∏–∑ –≤–µ–∫–∞ –≤ –≤–µ–∫ –≤—ã—Ä–∞—â–∏–≤–∞–ª–æ —Ä–æ–∂—å, –æ–≤–æ—â–∏, —Ñ—Ä—É–∫—Ç—ã. –í—Å–µ, —á—Ç–æ –≤–æ–¥–∏–ª–æ—Å—å –≤ —Ä–µ–∫–∞—Ö, –æ–∑—ë—Ä–∞—Ö, –Ω–∞ –±–æ–ª–æ—Ç–∞—Ö," \
                           f" –≤ –ª–µ—Å–∞—Ö, —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–ª–æ –ø–∏—Ç–∞–Ω–∏–µ.\n–ö–æ–Ω–µ—á–Ω–æ, –º—ã —É—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã, –Ω–æ —Å—Ç–∞—Ä–∞–µ–º—Å—è " \
                           f"–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö –∏–º–µ–Ω–Ω–æ –≤ –Ω–∞—à–µ–º –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º –ø—Ä–æ—á—Ç–µ–Ω–∏–∏.\n–ú—ã —Å—Ç–∞—Ä–∞–µ–º—Å—è, —á—Ç–æ–±—ã –≤ –Ω–∞—à–∏—Ö " \
                           f"—Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞—Ö –≤–æ—Å—Ö–∏—â–∞–ª–∏—Å—å –≥–æ—Å—Ç–∏ –Ω–∞—à–µ–π —Å—Ç—Ä–∞–Ω—ã –∏ –≥–æ—Ä–¥–∏–ª–∏—Å—å –±–µ–ª–æ—Ä—É—Å—ã." \
                           f""
        info_rest = f"–¢–¶ Green City\n" \
                    f"–¢–µ–ª–µ—Ñ–æ–Ω: +375 44 519-11-11\n" \
                    f"–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 11:00-23:00\n" \
                    f"–ú–µ—Ç—Ä–æ: –ö–∞–º–µ–Ω–Ω–∞—è –≥–æ—Ä–∫–∞\n" \
                    f"–ê–¥—Ä–µ—Å: –ú–∏–Ω—Å–∫, —É–ª. –ü—Ä–∏—Ç—ã—Ü–∫–æ–≥–æ, 156/1\n"
        url_rest = "\U0001F30D https://litviny.by/rus/about"
        url2_rest = "https://www.instagram.com/litviny.by/"
        bot.send_message(call.message.chat.id, f"{about_restaurant}\n{info_rest}\n–°–∞–π—Ç: {url_rest}\n\nInstagram: {url2_rest}", parse_mode="Markdown", reply_markup=Reviews_inline_keyb)
    if call.data.split(':')[1] == "r1":
        AfterReview_inline_keyb = InlineKeyboardMarkup()
        AfterReview_inline_keyb.add(InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="feedback:r3"))
        AfterReview_inline_keyb.add(InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="menu:b1"))
        result_card = ""
        for key, value in review_order_dict.items():
            result_card += f"\U0001F5E8{client_dict[value]}: '{key}'\n\n"
        print("–°–õ–û–í–ê–†–¨ –° –û–¢–ó–´–í–ê–ú–ò –û –ó–ê–ö–ê–ó–ê–•", result_card)
        if len(result_card) != 0:
            bot.send_message(call.message.chat.id, f"{result_card}", reply_markup=AfterReview_inline_keyb)
        else:
            bot.send_message(call.message.chat.id,
                             f"–û—Ç–∑—ã–≤–æ–≤ –µ—â–µ –Ω–µ—Ç. –í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π, –µ—Å–ª–∏ —Ä–∞–Ω–µ–µ –æ—Ñ—Ä–æ–º–ª—è–ª–∏ –∑–∞–∫–∞–∑.",
                             reply_markup=AfterReview_inline_keyb)
    if call.data.split(':')[1] == "r3":
        MakeReviewError_inline_keyb = InlineKeyboardMarkup()
        MakeReviewError_inline_keyb.add(InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="menu:b1"))
        MakeReviewError_inline_keyb.add(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="menu:txt2"))
        if call.message.chat.id in orders_telegram_id:  # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–Ω–µ–µ –¥–µ–ª–∞–ª –∑–∞–∫–∞–∑—ã
            print("clients id telegram", call.message.chat.id)
            bot.answer_callback_query(call.id)  # –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–∞–∂–∞—Ç–∏–µ
            bot.send_message(call.message.chat.id, "–ö–∞–∫ –≤—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ —Ä–∞–±–æ—Ç—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞?", reply_markup=telebot.types.ForceReply())  # —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –µ–≥–æ –æ—Ç–∑—ã–≤–µ
        else:
            bot.send_message(call.message.chat.id, "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –í—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Å –ø–æ–º–æ—â—å—é –Ω–∞—à–∞–µ–≥–æ —á–∞—Ç-–±–æ—Ç–∞. –°–ø–∞—Å–∏–±–æ!",
                             reply_markup=MakeReviewError_inline_keyb)  # –≤—ã–¥–∞—Ç—å –∫–ª–∞–≤—É –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–Ω–µ–µ –Ω–µ –¥–µ–ª–∞–ª –∑–∞–∫–∞–∑–æ–≤
    if call.data.split(':')[1] in ["profile", "to_profile"]:
        if call.data.split(':')[1] == "to_profile":
            global profile_edit_data
            profile_edit_data = {"–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è": "edit:name",
                                 "–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω": "edit:phone_number",
                                 "–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å": "edit:delivery_adress",
                                 "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é": "menu:b1",
                                 "–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É": "dish_card:basket2"}
        bot.answer_callback_query(call.id)
        user_id = call.from_user.id  # id —Ç–µ–ª–µ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("SELECT * FROM Clients WHERE telegram_id = ?", (user_id,))  # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –ë–î
        row = cursor.fetchone()
        if row is None:  # –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ/–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
            Reg_inline_keyb = InlineKeyboardMarkup()
            Reg_inline_keyb.add(InlineKeyboardButton("–†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø", callback_data="prereg:pushreg"))
            Reg_inline_keyb.add(InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="menu:b1"))
            bot.send_message(call.message.chat.id, "–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —á–∞—Ç-–±–æ—Ç–æ–º, –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.", reply_markup=Reg_inline_keyb)
        else:  # –µ—Å–ª–∏ –µ—Å—Ç—å, —Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –µ–º—É –∏–∑–º–µ–Ω–∏—Ç—å –∏—Ö
            name, phone, address = row[1], row[2], row[3]
            bot.send_message(call.message.chat.id,
                             f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n–ò–º—è: {name}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n–ê–¥—Ä–µ—Å: {address}\n\n–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ª—é–±–æ–µ –∏–∑ —ç—Ç–∏—Ö –ø–æ–ª–µ–π, –Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É.",
                             reply_markup=create_edit_button(profile_edit_data))
    if call.data.split(':')[1] in field_dict:
        global field
        field = call.data.split(':')[1]
    if call.data.split(':')[0] == "edit":
        bot.answer_callback_query(call.id)  # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ
        bot.send_message(call.message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è '{field_dict[field]}'.", reply_markup=telebot.types.ForceReply())
    global reg_name, reg_phone_number, reg_delivery_adress  # –∑–Ω–∞—á–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if call.data.split(':')[1] == "pushreg":
        with conn:
            conn.execute("INSERT OR IGNORE INTO Clients (name, phone_number, delivery_adress, telegram_id) values(?, ?, ?, ?)", (reg_name, reg_phone_number, reg_delivery_adress, user_telegram_id))
        conn.commit()
        bot.answer_callback_query(call.id)  # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ
        bot.send_message(call.message.chat.id, "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ:", reply_markup=create_registration_keyb())
    if call.data.split(':')[1] in reg_field_dict:
        global reg_field
        reg_field = call.data.split(':')[1]
    if call.data.split(':')[0] == "reg":
        bot.answer_callback_query(call.id)  # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ
        bot.send_message(call.message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è '{reg_field_dict[reg_field]}'.", reply_markup=telebot.types.ForceReply())
    if call.data.split(':')[0] == "accept":
        with conn:
            conn.execute("INSERT OR IGNORE INTO Clients (name, phone_number, delivery_adress, telegram_id) values(?, ?, ?, ?)", (reg_name, reg_phone_number, reg_delivery_adress, user_telegram_id))
        conn.commit()
        # bot.send_message(call.message.chat.id, f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—è '{reg_field_dict[save_field]}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=create_registration_keyb())
        if reg_name != "–£–∫–∞–∑–∞—Ç—å –∏–º—è" and reg_phone_number != "–£–∫–∞–∑–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω" and len(reg_phone_number) == 13 and reg_delivery_adress != "–£–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å":
            Success_reg_inline_keyb = InlineKeyboardMarkup()
            Success_reg_inline_keyb.add(InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="menu:b1"))
            bot.answer_callback_query(call.id)
            bot.send_message(call.message.chat.id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n"
                                                   f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
                                                   f"–ò–º—è: {reg_name}\n"
                                                   f"–¢–µ–ª–µ—Ñ–æ–Ω: {reg_phone_number}\n"
                                                   f"–ê–¥—Ä–µ—Å: {reg_delivery_adress}\n\n"
                                                   f"–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ª—é–±–æ–µ –∏–∑ —ç—Ç–∏—Ö –ø–æ–ª–µ–π –≤ —Å–≤–æ—ë–º –ø—Ä–æ—Ñ–∏–ª–µ.",
                             reply_markup=Success_reg_inline_keyb)
        else:
            bot.send_message(call.message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª–µ–π –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ.", reply_markup=create_registration_keyb())
    if call.data.split(':')[1] == 'txt4':
        user_id = call.from_user.id  # id —Ç–µ–ª–µ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("SELECT * FROM Clients WHERE telegram_id = ?", (user_id,))  # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –ë–î
        row = cursor.fetchone()
        print(row)
        if row is None:  # –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ/–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
            Reg_inline_keyb = InlineKeyboardMarkup()
            Reg_inline_keyb.add(InlineKeyboardButton("–†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø", callback_data="prereg:pushreg"))
            Reg_inline_keyb.add(InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="menu:b1"))
            bot.send_message(call.message.chat.id, "–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —á–∞—Ç-–±–æ—Ç–æ–º, –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.",
                             reply_markup=Reg_inline_keyb)
        else:
            with conn:
                ordered_dishes = [i[2] for i in cursor.execute(f"SELECT * FROM Orders WHERE telegram_id = {call.from_user.id}")]  # –¥–æ—Å—Ç–∞—ë–º –∏–∑ –ë–î id-–∫–∏ –∑–∞–∫–∞–∑–æ–≤
                total_price = [i[3] for i in cursor.execute(f"SELECT * FROM Orders WHERE telegram_id = {call.from_user.id}")]  # –¥–æ—Å—Ç–∞—ë–º –∏–∑ –ë–î total_price –∑–∞–∫–∞–∑–æ–≤
                dish_count_dict = dict(zip(ordered_dishes, total_price))
                order_dates = [i[4] for i in cursor.execute(f"SELECT * FROM Orders WHERE telegram_id = {call.from_user.id}")]  # –¥–æ—Å—Ç–∞—ë–º –∏–∑ –ë–î –î–∞—Ç—É
                result_dict = {}  # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
                for i in range(len(order_dates)):  # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º —Å–ø–∏—Å–∫–∞ –∏ –ø–æ–ª—É—á–∞–µ–º –∫–ª—é—á –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è a –ø–æ –∏–Ω–¥–µ–∫—Å—É i
                    key = list(dish_count_dict.keys())[i]
                    value = list(dish_count_dict.values())[i]
                    result_dict[order_dates[i]] = [key, value]  # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å –ø–∞—Ä—É –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ, –≥–¥–µ –∫–ª—é—á - —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ b, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ - —Å–ø–∏—Å–æ–∫ –∏–∑ –∫–ª—é—á–∞ –∏ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è
                print("–°–õ–û–í–ê–†–¨ –î–ê–¢–ê: –ê–ô–î–ò–®–ö–ò + –°–£–ú–ú–ê", result_dict)  # {'2023-06-05 17:55:36.576892': ['25:2, 28:1, ', 30.0], '2023-06-05 17:58:32.619595': ['25:2, 29:2, ', 40.0]}
            text_card = '–í–æ—Ç –≤—Å–µ –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n'
            num = 1
            for key, value in result_dict.items():
                order_date = key[:16]
                text_card += f"{num}. –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {order_date}:\n"
                for info in value[0].replace(" ", "").split(',')[:-1]:
                    print("info", info)
                    dish_name = [i for i in cursor.execute(f"SELECT name FROM Dish WHERE id = {info.split(':')[0]}")][0]
                    amount = info.split(':')[1]  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç—É–∫
                    text_card += f'- {dish_name[0]} - {amount} —à—Ç.\n'
                text_card += f"–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {value[1]} —Ä—É–±–ª–µ–π.\n"
                num += 1
            bot.send_message(call.message.chat.id, f'{text_card}', reply_markup=Main_inline_keyb)
    """ADMINISTRATION"""
    if call.data.split(':')[1] == "addadmin":
        add_inline_keyb = InlineKeyboardMarkup()
        add_inline_keyb.add(InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –Ω–æ–≤–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–µ", callback_data="addm:adminid"))
        add_inline_keyb.add(InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥‚Ü© ", callback_data="addm:backmenu"))
        bot.send_message(call.message.chat.id, "–î–æ–±–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –Ω–æ–≤–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–µ", reply_markup=add_inline_keyb)
    if call.data.split(':')[1] == "backmenu":
        bot.send_message(call.message.chat.id, "–î–æ–±–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –Ω–æ–≤–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–µ", reply_markup=Admin_keyb_lvl1)
    if call.data.split(":")[1] == "adminid":
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ telegram id –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=telebot.types.ForceReply())
    if call.data.split(':')[1] == "admin_orders_rev":
        try:
            with conn:
                review_id = [i[0] for i in conn.execute(f"SELECT * FROM Reviews")]
                review_text = [i[1] for i in conn.execute(f"SELECT * FROM Reviews")]
                client_id3 = [i[3] for i in conn.execute(f"SELECT * FROM Reviews")]
                status_review = [i[6] for i in conn.execute(f"SELECT * FROM Reviews")]
                client_name = [i[1] for i in conn.execute(f"SELECT * FROM Clients")]
                client_id4 = [i[0] for i in conn.execute(f"SELECT * FROM Clients")]
                client_dict2 = dict(zip(client_id4, client_name))
                # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –≤—ã–≤–æ–¥–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–∏–¥–∞:
                # {2: ['–ï–¥–∞ –≤–∫—É—Å–Ω–∞—è, –¥–æ—Å—Ç–∞–≤–∫–∞ –±—ã—Å—Ç—Ä–∞—è!', 142, 'YES'], }
                global review_result_dict
                review_result_dict = {}
                for key, value1, value2, value3 in zip(review_id, review_text, client_id3, status_review):
                    review_result_dict[key] = [value1, value2, value3]
                print("–°–õ–û–í–ê–†–¨ –¥–ª—è –≤—ã–≤–æ–¥–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞", review_result_dict)
        except Exception as e:
            print(e)
        global result_card_for_admin
        result_card_for_admin = ""
        for key, value in review_result_dict.items():
            result_card_for_admin += f"{key}. \U0001F5E8{client_dict2[value[1]]}: '{value[0]}'\n\n"
        if len(result_card_for_admin) != 0:
            bot.send_message(call.message.chat.id, f"–û—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
                                                   f"{result_card_for_admin}",
                             reply_markup=create_admin_review_keyb(review_result_dict))
        else:
            bot.send_message(call.message.chat.id, f"–û—Ç–∑—ã–≤–æ–≤ –Ω–µ—Ç.", reply_markup=Admin_keyb_lvl2)
    bot.answer_callback_query(call.id)  # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ
    if call.data.split(':')[0] == "-edit_review":  # –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–û—Ç–∫–ª–æ–Ω–∏—Ç—å"
        review_result_dict[int(call.data.split(':')[1][1:])][2] = "NO"
        try:
            with conn:
                conn.execute(f"UPDATE Reviews SET accept = ? WHERE id = ?",
                             (review_result_dict[int(call.data.split(':')[1][1:])][2], int(call.data.split(':')[1][1:])))
                conn.execute(f"UPDATE Reviews SET admin_id = ? WHERE id = ?",
                             (call.message.chat.id, int(call.data.split(':')[1][1:])))
            conn.commit()
        except Exception as e:
            print(e)
        bot.edit_message_text(f"{result_card_for_admin}", call.message.chat.id, call.message.message_id,
                                  reply_markup=create_admin_review_keyb(review_result_dict))  # –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        msg = bot.send_message(call.message.chat.id, f"–°—Ç–∞—Ç—É—Å—Ç –æ—Ç–∑—ã–≤–∞ ‚Ññ {int(call.data.split(':')[1][1:])}. "
                                                     f"—É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ 'NO'")
        time.sleep(3)
        bot.delete_message(call.message.chat.id, msg.message_id)
    if call.data.split(':')[0] == "+edit_review":  # –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–£—Ç–≤–µ—Ä–¥–∏—Ç—å"
        print("–ü–†–ò–ù–Ø–¢–¨ –ö–û–õ–ë–≠–ö–î–ê–¢–ê", int(call.data.split(':')[1][1:]))
        review_result_dict[int(call.data.split(':')[1][1:])][2] = "YES"
        try:
            with conn:
                conn.execute(f"UPDATE Reviews SET accept = ? WHERE id = ?",
                             (review_result_dict[int(call.data.split(':')[1][1:])][2], int(call.data.split(':')[1][1:])))
                conn.execute(f"UPDATE Reviews SET admin_id = ? WHERE id = ?",
                             (call.message.chat.id, int(call.data.split(':')[1][1:])))
            conn.commit()
        except Exception as e:
            print(e)
        bot.edit_message_text(f"{result_card_for_admin}", call.message.chat.id, call.message.message_id,
                              reply_markup=create_admin_review_keyb(
                                  review_result_dict))  # –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        msg = bot.send_message(call.message.chat.id, f"–°—Ç–∞—Ç—É—Å—Ç –æ—Ç–∑—ã–≤–∞ ‚Ññ {int(call.data.split(':')[1][1:])}. —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ 'YES'")
        time.sleep(3)
        bot.delete_message(call.message.chat.id, msg.message_id)
    if call.data.split(':')[1] == "admin_panel":
        bot.send_message(call.message.chat.id,
                         "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å 2 —É—Ä–æ–≤–Ω—è.\n"
                         "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:\n"
                         "- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–ª—é–¥–∞;\n"
                         "- –ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–ª—é–¥–∞ –Ω–∞ –°–¢–û–ü\n"
                         "- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–æ–≤.", reply_markup=Admin_keyb_lvl2)
    if call.data.split(':')[1] == "admin_dishes_rev":
        try:
            with conn:
                review_dish_id = [i[0] for i in conn.execute(f"SELECT * FROM ReviewDish")]
                review_dish_text = [i[1] for i in conn.execute(f"SELECT * FROM ReviewDish")]
                client_dish_id = [i[2] for i in conn.execute(f"SELECT * FROM ReviewDish")]
                status_review_dish = [i[4] for i in conn.execute(f"SELECT * FROM ReviewDish")]
                dish_id_id = [i[3] for i in conn.execute(f"SELECT * FROM ReviewDish")]
                client_name = [i[1] for i in conn.execute(f"SELECT * FROM Clients")]
                client_id4 = [i[0] for i in conn.execute(f"SELECT * FROM Clients")]
                client_dict2 = dict(zip(client_id4, client_name))
                # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –≤—ã–≤–æ–¥–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–∏–¥–∞:
                # {3: ['Super', 142, None, 25], 4: ['–í–µ–ª—å–º—ñ —Å–º–∞—á–Ω–∞', 142, None, 9]}
                global review_dish_result_dict
                review_dish_result_dict = {}
                for key, value1, value2, value3, value4 in zip(review_dish_id, review_dish_text, client_dish_id, status_review_dish, dish_id_id):
                    review_dish_result_dict[key] = [value1, value2, value3, value4]
                print("–°–õ–û–í–ê–†–¨ –¥–ª—è –≤—ã–≤–æ–¥–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –æ—Ç–∑—ã–≤–æ–≤ –æ –±–ª—é–¥–∞—Ö –¥–ª—è –∞–¥–º–∏–Ω–∞", review_dish_result_dict)
        except Exception as e:
            print(e)
        global result_card_for_admin2
        result_card_for_admin2 = ""
        for key, value in review_dish_result_dict.items():
            rev_dish_name = [i[1] for i in conn.execute(f"SELECT * FROM Dish WHERE id = {value[3]}")][0]
            print(rev_dish_name)
            result_card_for_admin2 += f"{key}. {rev_dish_name}: '{value[0]}' (\U0001F5E8{client_dict2[value[1]]})\n\n"
        if len(result_card_for_admin2) != 0:
            bot.send_message(call.message.chat.id, f"–û—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
                                                   f"{result_card_for_admin2}",
                             reply_markup=create_admin_reviewdish_keyb(review_dish_result_dict))
        else:
            bot.send_message(call.message.chat.id, f"–û—Ç–∑—ã–≤–æ–≤ –Ω–µ—Ç.", reply_markup=Admin_keyb_lvl2)

            bot.answer_callback_query(call.id)  # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ
    bot.answer_callback_query(call.id)  # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ
    if call.data.split(':')[0] == "-edit_reviewdish":  # –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–û—Ç–∫–ª–æ–Ω–∏—Ç—å"
        review_dish_result_dict[int(call.data.split(':')[1][2:])][2] = "NO"
        try:
            with conn:
                conn.execute(f"UPDATE ReviewDish SET accept = ? WHERE id = ?",
                             (review_dish_result_dict[int(call.data.split(':')[1][2:])][2], int(call.data.split(':')[1][2:])))
                conn.execute(f"UPDATE ReviewDish SET admin_id = ? WHERE id = ?",
                             (call.message.chat.id, int(call.data.split(':')[1][2:])))
            conn.commit()
        except Exception as e:
            print(e)
        bot.edit_message_text(f"{result_card_for_admin2}", call.message.chat.id, call.message.message_id,
                              reply_markup=create_admin_reviewdish_keyb(
                                  review_dish_result_dict))  # –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        msg = bot.send_message(call.message.chat.id, f"–°—Ç–∞—Ç—É—Å—Ç –æ—Ç–∑—ã–≤–∞ ‚Ññ {int(call.data.split(':')[1][2:])}. "
                                                     f"—É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ 'NO'")
        time.sleep(3)
        bot.delete_message(call.message.chat.id, msg.message_id)
    if call.data.split(':')[0] == "+edit_reviewdish":  # –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–£—Ç–≤–µ—Ä–¥–∏—Ç—å"
        review_dish_result_dict[int(call.data.split(':')[1][2:])][2] = "YES"
        try:
            with conn:
                conn.execute(f"UPDATE ReviewDish SET accept = ? WHERE id = ?",
                             (review_dish_result_dict[int(call.data.split(':')[1][2:])][2],
                              int(call.data.split(':')[1][2:])))
                conn.execute(f"UPDATE ReviewDish SET admin_id = ? WHERE id = ?",
                             (call.message.chat.id, int(call.data.split(':')[1][2:])))
            conn.commit()
        except Exception as e:
            print(e)
        bot.edit_message_text(f"{result_card_for_admin2}", call.message.chat.id, call.message.message_id,
                              reply_markup=create_admin_reviewdish_keyb(
                                  review_dish_result_dict))  # –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        msg = bot.send_message(call.message.chat.id, f"–°—Ç–∞—Ç—É—Å—Ç –æ—Ç–∑—ã–≤–∞ ‚Ññ {int(call.data.split(':')[1][2:])}. "
                                                     f"—É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ 'NO'")
        time.sleep(3)
        bot.delete_message(call.message.chat.id, msg.message_id)
    if call.data.split(':')[1] == "admin_dish_add":
        global result_card_for_admin3
        result_card_for_admin3 = ""
        # for key, value in default_dict_add_dish.items():
        #     result_card_for_admin3 += f"{key}: {value}\n"
        bot.send_message(call.message.chat.id, f"–ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–æ–≤–æ–≥–æ –±–ª—é–¥–∞.\n"
                                               f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –≤–Ω–µ—Å–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ.",
                         reply_markup=create_admin_adddish_keyb(default_dict_add_dish))
    if call.data.split(':')[0] == "admin_add_new_dish":
        bot.answer_callback_query(call.id)  # –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–∞–∂–∞—Ç–∏–µ
        global question_num
        question_num = int(call.data.split(':')[1][9:])
        print(question_num)
        question = default_dict_add_dish[question_num][2]
        print(question)
        if question in [v[2] for k, v in default_dict_add_dish.items()][:6]:  # –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –∞–¥–º–∏–Ω–∞ —Å–≤–µ–¥–µ–Ω–∏—è –¥–ª—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã Dish
            bot.send_message(call.message.chat.id,
                             f"{question}",
                             reply_markup=telebot.types.ForceReply())  # —Å–æ–æ—Ç–≤-–π –≤–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω—É
        if question == [v[2] for k, v in default_dict_add_dish.items()][6]:  # –≤—ã–±–æ—Ä –º–µ—Ä—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –±–ª—é–¥–∞
            measure_keyboard = InlineKeyboardMarkup(row_width=2)
            measure_keyboard.add(InlineKeyboardButton("–≥—Ä.", callback_data='measure:gr'),
                                 InlineKeyboardButton("–º–ª.", callback_data='measure:ml'))
            bot.send_message(call.message.chat.id, f"{question}", reply_markup=measure_keyboard)  # –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –∞–¥–º–∏–Ω–∞ –≤—ã–±–æ—Ä
        if question == [v[2] for k, v in default_dict_add_dish.items()][7]:  # –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category_question_keyboard = InlineKeyboardMarkup(row_width=2)
            [category_question_keyboard.add(InlineKeyboardButton(key, callback_data=f"qn_cat:{key}:{value}")) for key, value in
             column_dict.items()]
            bot.send_message(call.message.chat.id, f"{question}", reply_markup=category_question_keyboard)  # –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –∞–¥–º–∏–Ω–∞ –≤—ã–±–æ—Ä
        if question == [v[2] for k, v in default_dict_add_dish.items()][8]:  # –≤—ã–±–æ—Ä —Å—É–±–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            sub_category_question_keyboard = InlineKeyboardMarkup(row_width=2)
            [sub_category_question_keyboard.add(InlineKeyboardButton(key, callback_data=f"qn_subcat:{key}:{value}")) for key, value in
             subcat_dict2.items()]
            bot.send_message(call.message.chat.id, f"{question}", reply_markup=sub_category_question_keyboard)  # –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –∞–¥–º–∏–Ω–∞ —Ñ–æ—Ç–æ
        if question == [v[2] for k, v in default_dict_add_dish.items()][9]:  # –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
            bot.send_message(call.message.chat.id,
                             f"{question}",
                             reply_markup=telebot.types.ForceReply())  # —Å–æ–æ—Ç–≤-–π –≤–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω—É
    if call.data.split(':')[0] == "measure":
        bot.answer_callback_query(call.id)  # –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–∞–∂–∞—Ç–∏–µ
        if call.data.split(':')[1] == "gr":
            default_dict_add_dish[7][1] = "–≥—Ä."
            bot.send_message(call.message.chat.id, f"–ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–æ–≤–æ–≥–æ –±–ª—é–¥–∞:", reply_markup=create_admin_adddish_keyb(
                default_dict_add_dish))  # –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            msg = bot.send_message(call.message.chat.id, f"–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–∞—Ä—Ç–æ—á–∫—É")
            time.sleep(3)
            bot.delete_message(call.message.chat.id, msg.message_id)
        if call.data.split(':')[1] == "ml":
            default_dict_add_dish[7][1] = "–º–ª."
            bot.send_message(call.message.chat.id, f"–ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–æ–≤–æ–≥–æ –±–ª—é–¥–∞:", reply_markup=create_admin_adddish_keyb(
                default_dict_add_dish))  # –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            msg = bot.send_message(call.message.chat.id, f"–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–∞—Ä—Ç–æ—á–∫—É")
            time.sleep(3)
            bot.delete_message(call.message.chat.id, msg.message_id)
    if call.data.split(':')[0] == "qn_cat":
        print(call.data.split(':')[0])
        bot.answer_callback_query(call.id)  # –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–∞–∂–∞—Ç–∏–µ
        category_id_qn, category_name_qn = call.data.split(':')[2], call.data.split(':')[1]
        default_dict_add_dish[8][1] = f"{category_id_qn}: {category_name_qn}"
        bot.send_message(call.message.chat.id, f"–ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–æ–≤–æ–≥–æ –±–ª—é–¥–∞:", reply_markup=create_admin_adddish_keyb(default_dict_add_dish))  # –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        msg = bot.send_message(call.message.chat.id, f"–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–∞—Ä—Ç–æ—á–∫—É")
        time.sleep(3)
        bot.delete_message(call.message.chat.id, msg.message_id)
    if call.data.split(':')[0] == "qn_subcat":
        print(call.data.split(':')[0])
        bot.answer_callback_query(call.id)  # –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–∞–∂–∞—Ç–∏–µ
        subcategory_id_qn, subcategory_name_qn = call.data.split(':')[2], call.data.split(':')[1]
        default_dict_add_dish[9][1] = f"{subcategory_id_qn}: {subcategory_name_qn}"
        bot.send_message(call.message.chat.id, f"–ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–æ–≤–æ–≥–æ –±–ª—é–¥–∞:", reply_markup=create_admin_adddish_keyb(default_dict_add_dish))  # –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        msg = bot.send_message(call.message.chat.id, f"–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–∞—Ä—Ç–æ—á–∫—É")
        time.sleep(3)
        bot.delete_message(call.message.chat.id, msg.message_id)
    if call.data.split(':')[1] == "save_new_dish":
        print("SAVE NEW DISH")
        d_name = default_dict_add_dish[1][1]
        d_description = default_dict_add_dish[2][1]
        d_photo = default_dict_add_dish[10][1]
        d_price = float(default_dict_add_dish[3][1])
        d_time = int(default_dict_add_dish[4][1])
        d_weight = float(default_dict_add_dish[5][1])
        d_unit = default_dict_add_dish[7][1]
        d_is_stop = "False"
        d_count = int(default_dict_add_dish[6][1])
        d_category_id = int(default_dict_add_dish[8][1].split(":")[0])
        d_subcategory_id = int(default_dict_add_dish[9][1].split(":")[0])
        print(default_dict_add_dish)
        with conn:
            conn.execute("INSERT INTO Dish (name, description, photo, price, time, weight, unit, is_stop, count, category_id, subcategory_id) "
                         "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
                         (d_name, d_description, d_photo, d_price, d_time, d_weight, d_unit, d_is_stop, d_count, d_category_id, d_subcategory_id))  # –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É "–û—Ç–∑—ã–≤—ã"
        conn.commit()  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

        bot.send_message(call.message.chat.id, "–ù–æ–≤–æ–µ –±–ª—é–¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö", reply_markup=Admin_keyb_lvl2)
    if call.data.split(':')[1] == "admin_dish_stop":
        try:
            with conn:
                dish_id = [i[0] for i in conn.execute(f"SELECT * FROM Dish")]
                dish_name = [i[1] for i in conn.execute(f"SELECT * FROM Dish")]
                status_dish = [i[8] for i in conn.execute(f"SELECT * FROM Dish")]
                global status_dish_result_dict
                status_dish_result_dict = {}
                for key, value1, value2 in zip(dish_id, dish_name, status_dish):
                    status_dish_result_dict[key] = [value1, value2]
                print("–°–õ–û–í–ê–†–¨ —Å—Ç–∞—Ç—É—Å–∞ –±–ª—é–¥ –¥–ª—è –∞–¥–º–∏–Ω–∞", status_dish_result_dict)
        except Exception as e:
            print(e)
        bot.send_message(call.message.chat.id, f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–ª—é–¥–∞:", reply_markup=create_admin_stop_dish_keyboard(status_dish_result_dict))
    if call.data.split(':')[0] == "stop_dish":  # –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ò–∑–º–µ–Ω–∏—Ç—å"
        print(call.data.split(':')[1])
        if call.data.split(':')[1] == "–í –ø—Ä–æ–¥–∞–∂–µ":
            status_dish_result_dict[int(call.data.split(':')[2])][1] = "–ù–µ –ø—Ä–æ–¥–∞–µ—Ç—Å—è"
            try:
                with conn:
                    conn.execute(f"UPDATE Dish SET is_stop = ? WHERE id = ?",
                                 (status_dish_result_dict[int(call.data.split(':')[2])][1], int(call.data.split(':')[2])))
                conn.commit()
            except Exception as e:
                print(e)
            bot.edit_message_text(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–ª—é–¥–∞:", call.message.chat.id, call.message.message_id,
                                  reply_markup=create_admin_stop_dish_keyboard(
                                      status_dish_result_dict))  # –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            msg_status = bot.send_message(call.message.chat.id, f"–°—Ç–∞—Ç—É—Å –¥–ª—è –±–ª—é–¥–∞ {call.data.split(':')[2]} –æ–±–Ω–æ–≤–ª—ë–Ω")
            time.sleep(3)
            bot.delete_message(call.message.chat.id, msg_status.message_id)
        if call.data.split(':')[1] == "–ù–µ –ø—Ä–æ–¥–∞–µ—Ç—Å—è":
            status_dish_result_dict[int(call.data.split(':')[2])][1] = "–í –ø—Ä–æ–¥–∞–∂–µ"
            try:
                with conn:
                    conn.execute(f"UPDATE Dish SET is_stop = ? WHERE id = ?",
                                 ("–í –ø—Ä–æ–¥–∞–∂–µ", int(call.data.split(':')[2])))
                conn.commit()
            except Exception as e:
                print(e)
            bot.edit_message_text(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–ª—é–¥–∞:", call.message.chat.id, call.message.message_id,
                                  reply_markup=create_admin_stop_dish_keyboard(status_dish_result_dict))  # –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            msg_status = bot.send_message(call.message.chat.id, f"–°—Ç–∞—Ç—É—Å –¥–ª—è –±–ª—é–¥–∞ {call.data.split(':')[2]} –æ–±–Ω–æ–≤–ª—ë–Ω")
            time.sleep(3)
            bot.delete_message(call.message.chat.id, msg_status.message_id)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –µ–≥–æ –æ—Ç–∑—ã–≤–µ –Ω–∞ —Ä–∞–±–æ—Ç—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ —Å –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –∑–∞–ø–∏—Å—å –≤ –ë–î
@bot.message_handler(func=lambda message: message.reply_to_message and message.reply_to_message.text in ["–ö–∞–∫ –≤—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ —Ä–∞–±–æ—Ç—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞?"])
def handle_review_answer(message):
    client_id = [i[0] for i in conn.execute(f"SELECT id FROM Clients WHERE telegram_id = {message.chat.id}")][0]
    orders_id = [i[0] for i in conn.execute(f"SELECT id FROM Orders WHERE telegram_id = {message.chat.id}")][-1] # id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–∫–∞–∑–∞ –∏–∑ –ë–î
    print("–∞–π–¥–∏ —é–∑–µ—Ä–∞", client_id, "id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–∫–∞–∑–∞ –∏–∑ –ë–î", orders_id)
    dish_id = None
    review_order = message.text  # —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    review_dish = ""
    with conn:
        conn.execute("INSERT INTO Reviews (review_order, review_dish, client_id, orders_id, dish_id) VALUES (?, ?, ?, ?, ?)",
                     (review_order, review_dish, client_id, orders_id, dish_id)) # –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É "–û—Ç–∑—ã–≤—ã"
    conn.commit()  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à –æ—Ç–∑—ã–≤!", reply_markup=Main_inline_keyb)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –µ–≥–æ –æ—Ç–∑—ã–≤–µ –Ω–∞ –±–ª—é–¥–æ —Å –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –∑–∞–ø–∏—Å—å—é –≤ –ë–î
@bot.message_handler(func=lambda message: message.reply_to_message and message.reply_to_message.text in ["–ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –ª–∏ –í–∞–º –¥–∞–Ω–Ω–æ–µ –±–ª—é–¥–æ?"])
def handle_dish_review_answer(message):
    client_id = [i[0] for i in conn.execute(f"SELECT id FROM Clients WHERE telegram_id = {message.chat.id}")][0]
    orders_id = [i[0] for i in conn.execute(f"SELECT id FROM Orders WHERE telegram_id = {message.chat.id}")][-1] # id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–∫–∞–∑–∞ –∏–∑ –ë–î
    print("–∞–π–¥–∏ —é–∑–µ—Ä–∞", client_id, "id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–∫–∞–∑–∞ –∏–∑ –ë–î", orders_id)
    dish_id = dish_id_from_card
    review_dish = message.text  # —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with conn:
        conn.execute("INSERT INTO ReviewDish (review_dish, client_id, dish_id) VALUES (?, ?, ?)",
                     (review_dish, client_id, dish_id)) # –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É "–û—Ç–∑—ã–≤—ã"
    conn.commit()  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à –æ—Ç–∑—ã–≤!", reply_markup=Main_inline_keyb)


# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –µ–≥–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/—Ç–µ–ª–µ—Ñ–æ–Ω–µ/–∞–¥—Ä–µ—Å–µ {field} –ø—Ä–∏ –∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–∏
@bot.message_handler(func=lambda message: message.reply_to_message and message.reply_to_message.text in [f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è '{field_dict[field]}'."])
def handle_name_answer(message):
    global field, field_dict
    # message.from_user.id - —ç—Ç–æ telegram id, message.text - –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–∞–Ω–Ω—ã–µ
    with conn:
        # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É "Clients" —Å id —Ç–µ–ª–µ–≥–∏ –∏ –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/—Ç–µ–ª–µ—Ñ–æ–Ω–æ–º/–∞–¥—Ä–µ—Å–æ–º {field}
        conn.execute(f"UPDATE Clients SET {field} = ? WHERE telegram_id = ?", (message.text, message.from_user.id))
    conn.commit()
    bot.send_message(message.chat.id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ {field_dict[field]}.", reply_markup=create_edit_button(profile_edit_data))


# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –µ–≥–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/—Ç–µ–ª–µ—Ñ–æ–Ω–µ/–∞–¥—Ä–µ—Å–µ reg_field_dict[reg_field]
@bot.message_handler(func=lambda message: message.reply_to_message and message.reply_to_message.text in [f"–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è '{reg_field_dict[reg_field]}'.", f"–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª–µ–π –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ."])
def handle_reg_answer(message):
    global reg_name, reg_phone_number, reg_delivery_adress  # –∑–Ω–∞—á–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if reg_field == 'name':
        reg_name = message.text
    if reg_field == 'phone_number':
        reg_phone_number = message.text
    if reg_field == 'delivery_adress':
        reg_delivery_adress = message.text
    bot.send_message(message.chat.id, f'''–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –ø–æ–ª–µ "{reg_field_dict[reg_field]}".\n–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ:''', reply_markup=create_registration_keyb())


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç –æ —Ç–µ–∫—É—â–µ–º –∑–∞–∫–∞–∑–µ —Å –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –∑–∞–ø–∏—Å—å—é –≤ –ë–î Orders
@bot.message_handler(func=lambda message: message.reply_to_message and message.reply_to_message.text in ["–£–∫–∞–∂–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫ —Å–≤–æ–µ–º—É –∑–∞–∫–∞–∑—É."])
def handle_order_answer(message):
    orders_table = "INSERT OR IGNORE INTO Orders (client_id, dish_ids, total_price, date, telegram_id, comment) values(?, ?, ?, ?, ?, ?)"
    total_price = [i[0] for i in conn.execute(
        f'SELECT total_price FROM ShoppingCart WHERE client_id = {message.chat.id} AND count > 0')]
    current_datetime = DT.datetime.now()
    telegram_id = message.chat.id
    comment = message.text
    with conn:
        client_id = [i[0] for i in conn.execute(f"SELECT * FROM Clients WHERE telegram_id = {message.chat.id}")][0]
        dish_ids = ''
        list_orders_dish = [i[0] for i in conn.execute(
            f'SELECT ShoppingCart.dish_id FROM ShoppingCart WHERE ShoppingCart.client_id = {message.chat.id} AND ShoppingCart.count > 0')]
        # print(list_orders_dish)
        j = 0
        for i in list_orders_dish:
            print(i)
            count_orders = [i[0] for i in conn.execute(
                f"SELECT ShoppingCart.count FROM ShoppingCart WHERE {int(i)} = ShoppingCart.dish_id AND ShoppingCart.count > 0")][0]
            dish_ids += str(i) + ':' + str(count_orders) + ', '
            j += 1
        conn.execute(orders_table, [client_id, dish_ids, total_price, current_datetime, telegram_id, comment])
    conn.commit()
    with conn:
        conn.execute(f'DELETE FROM ShoppingCart WHERE client_id = {message.chat.id}')
    conn.commit()
    bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π! –ü–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è —É—á–µ—Å—Ç—å –í–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è.\n'
                                      '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –í–∞—à –∑–∞–∫–∞–∑ :) ', reply_markup=Main_inline_keyb)
    orders_id = [i for i in conn.execute(f'SELECT id FROM Orders WHERE  telegram_id = {message.chat.id}')][-1][0]
    print(orders_id)
    markup_administration = InlineKeyboardMarkup()
    markup_administration.add(InlineKeyboardButton('–ü–æ—Å—Ç—É–ø–∏–ª –∑–∞–∫–∞–∑', callback_data=f'0:order_is_ready:{orders_id}'))
    admin_to_information = ''
    for i in conn.execute(
            f"SELECT Dish.name, ShoppingCart.count FROM Dish, ShoppingCart WHERE ShoppingCart.client_id = {message.chat.id} "
            f"AND Dish.id = ShoppingCart.dish_id"):
        admin_to_information += f'**–ù–ê–ó–í–ê–ù–ò–ï - {i[0]} –ö–û–õ-–í–û:{i[1]}**\n'
    bot.send_message(chat_id='@restaurantletvin', text=f'–ö–ª–∏–µ–Ω—Ç –∑–∞–∫–∞–∑–∞–ª:\n{admin_to_information}',
                     parse_mode="Markdown", reply_markup=markup_administration)
    conn.execute(f'DELETE FROM ShoppingCart WHERE client_id = {message.chat.id}')


@bot.message_handler(func=lambda message: message.reply_to_message and message.reply_to_message.text in ["–í–≤–µ–¥–∏—Ç–µ telegram id –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"])
def handler_admin_first_answer(message):
    print("–®–ª—è–ø–∞1")
    admin_table = "INSERT OR IGNORE INTO BotAdmins (telegram_id ,phone_number, position, first_name, last_name) values (?, ?, ?, ?, ?)"
    global tg_id
    tg_id = message.text
    first_name, last_name, phone_number, position = '', '', '', ''
    # add_adm = user_id
    with conn:
        conn.execute(admin_table, [tg_id, phone_number, position, first_name, last_name])
    conn.commit()
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=telebot.types.ForceReply())


@bot.message_handler(func=lambda message: message.reply_to_message and message.reply_to_message.text in ["–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"])
def handler_admin_first_answer(message):
    print(tg_id, "–®–ª—è–ø–∞2")
    first_name = message.text
    with conn:
        conn.execute(f"UPDATE BotAdmins SET first_name = ? WHERE telegram_id = ?", (first_name, tg_id))
    conn.commit()
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=telebot.types.ForceReply())


@bot.message_handler(func=lambda message: message.reply_to_message and message.reply_to_message.text in ["–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"])
def handler_admin_last_answer(message):
    last_name = message.text
    with conn:
        conn.execute(f"UPDATE BotAdmins SET last_name = ? WHERE telegram_id = ?", (last_name, tg_id))
    conn.commit()
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=telebot.types.ForceReply())


@bot.message_handler(func=lambda message: message.reply_to_message and message.reply_to_message.text in ["–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"])
def handler_admin_last_answer(message):
    phone = message.text
    with conn:
        conn.execute(f"UPDATE BotAdmins SET phone_number = ? WHERE telegram_id = ?", (phone, tg_id))
    conn.commit()
    bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', reply_markup=telebot.types.ForceReply())


@bot.message_handler(func=lambda message: message.reply_to_message and message.reply_to_message.text in ['–£–∫–∞–∂–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'])
def handler_admin_last_answer(message):
    position = message.text
    with conn:
        conn.execute(f"UPDATE BotAdmins SET position = ? WHERE telegram_id = ?", (position, tg_id))
    conn.commit()
    bot.send_message(message.chat.id, "–ê–¥–º–∏–Ω–∏c—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω ", reply_markup=Admin_keyb_lvl1)


question_list = [v[2] for k, v in default_dict_add_dish.items()]
print(question_list[:6])
@bot.message_handler(func=lambda message: message.reply_to_message and message.reply_to_message.text in question_list[:6])
def handler_admin_last_answer(message):
    global default_dict_add_dish
    new_dish_field = message.text
    default_dict_add_dish[question_num][1] = new_dish_field
    print(default_dict_add_dish)
    bot.send_message(message.chat.id, f"–ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–æ–≤–æ–≥–æ –±–ª—é–¥–∞:", reply_markup=create_admin_adddish_keyb(default_dict_add_dish))  # –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    msg = bot.send_message(message.chat.id, f"–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–∞—Ä—Ç–æ—á–∫—É")
    time.sleep(3)
    bot.delete_message(message.chat.id, msg.message_id)


@bot.message_handler(content_types=['text', 'photo'], func=lambda message: message.reply_to_message and message.reply_to_message.text == "–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –±–ª—é–¥–∞")
def handle_photo_and_text(message):
    if message.text:  # –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç
        bot.reply_to(message, '–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –±–ª—é–¥–∞', reply_markup=telebot.types.ForceReply())  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    elif message.photo:  # –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
        file_id = message.photo[-1].file_id  # –ø–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ñ–∞–π–ª–∞
        file_info = bot.get_file(file_id)  # –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        file_path = file_info.file_path  # –ø–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        print(str(int(dish_ids[-1]) + 1))
        print(file_id, file_info, file_path)
        # file_name = os.path.basename(file_path)  # –ø–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        photo_file_name = str(int(dish_ids[-1]) + 1) + ".jpg"  # –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–æ—Ç–∫–∏ = "–∞–π–¥–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–ª—é–¥–∞ –≤ –ë–î + 1"
        downloaded_file = bot.download_file(file_path)  # —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        if not os.path.exists(PHOTO_DIR):  # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
            os.makedirs(PHOTO_DIR)  # –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ —Å–æ–∑–¥–∞–µ–º –µ–µ
        with open(os.path.join(PHOTO_DIR, photo_file_name), 'wb') as f:  # –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –±–∏–Ω–∞—Ä–Ω–æ–º —Ä–µ–∂–∏–º–µ
            f.write(downloaded_file)  # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
        global default_dict_add_dish
        new_dish_field = photo_file_name
        default_dict_add_dish[question_num][1] = new_dish_field
        bot.send_message(message.chat.id, f"–ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–æ–≤–æ–≥–æ –±–ª—é–¥–∞:", reply_markup=create_admin_adddish_keyb(
            default_dict_add_dish))  # –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        msg1 = bot.reply_to(message, '–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!')  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        time.sleep(3)
        bot.delete_message(message.chat.id, msg1.message_id)


print("Ready")
bot.infinity_polling(none_stop=True, interval=0)